<?php
/**
 * Created by PhpStorm.
 * User: johnny
 * Date: 16-11-21
 * Time: 下午5:59
 */

namespace backend\modules\statistic\models;


use backend\models\BaseRecord;
use backend\models\interfaces\DeleteRecordOperator;
use backend\models\UUID;
use backend\models\MyPagination;
use backend\modules\rbac\model\RBACManager;

class SalesAnniversaryAchievementStatistic extends BaseRecord implements DeleteRecordOperator
{
    public static $yearList = [
        2015 => 2015,
        2016 => 2016,
        2017 => 2017,
        2018 => 2018,
        2019 => 2019,
        2020 => 2020,
        2021 => 2021,
        2022 => 2022,
        2023 => 2023,
    ];

    public static $aliasMap = [
        'statistic'=>'t1',
        'sales'=>'t2',
        'employee_position_map'=>'t3',
        'position'=>'t4',
        'department'=>'t5',
    ];

    const ValidateSucceed = 1;
    const ValidateFailed = -1;

    public static function tableName()
    {
        return self::CRMSalesAnniversaryAchievementStatistic;
    }

    public function validateTarget($sales_uuid, $year) {
        if(empty($sales_uuid) || empty($year)) {
            return self::ValidateSucceed;
        }

        $record = self::find()->andWhere(['sales_uuid' => $sales_uuid, 'year'=>$year])->one();
        if(empty($record)) {
            return self::ValidateSucceed;
        }

        return self::ValidateFailed;
    }

    public function formDataPreHandler(&$formData, $record)
    {
        if(empty($record)) {
            if(!isset($formData['uuid']) || empty($formData['uuid'])) {
                $formData['uuid'] = UUID::getUUID();
            }
        }
        parent::formDataPreHandler($formData, $record); // TODO: Change the autogenerated stub
    }

    public function insertRecord($formData)
    {
        if(empty($formData)) {
            return true;
        }

        if(!$this->updatePreHandler($formData)) {
            return true;
        }

        return $this->insert();
    }

    public function updateRecord($formData)
    {
        if(empty($formData) || empty($formData['uuid'])) {
            return true;
        }

        $record = self::find()->andWhere(['uuid'=>$formData['uuid']])->one();
        if(empty($record) || !$this->updatePreHandler($formData, $record)) {
            return true;
        }

        $record->update();
        return true;
    }

    public function deleteRecord($uuid)
    {
        if(empty($uuid)) {
            return true;
        }

        $record = self::find()->andWhere(['uuid'=>$uuid])->one();
        if(empty($record)) {
            return true;
        }
        return $record->delete();
    }

    public function anniversaryAchievementList($conditions = null, $fetchOne = false) {
        $query = self::find()
            ->alias('t1')
            ->select([
                't1.*',
                't2.name sales_name',
                'group_concat(t4.name) position_name',
                'group_concat(t4.uuid) position_uuid',
                'group_concat(t5.name) department_name',
                'group_concat(t5.uuid) department_uuid'])
            ->leftJoin(self::EmployeeBasicInformationTableName .' t2', 't1.sales_uuid = t2.uuid')
            ->leftJoin(self::EmployeePositionMapTableName . ' t3', 't2.uuid = t3.em_uuid')
            ->leftJoin(self::PositionTableName . ' t4', 't4.uuid = t3.position_uuid')
            ->leftJoin(self::DepartmentTableName . ' t5', 't5.uuid = t4.de_uuid')
            ->andWhere($conditions)
            ->groupBy('t1.uuid');

        if($fetchOne) {
            return $query->asArray()->one();
        }

        $pagination = new MyPagination([
            'totalCount'=>$query->count(),
            'pageSize' => self::PageSize,
        ]);
        $list = $query->orderBy('t1.year desc')->offset($pagination->offset)->limit($pagination->limit)->asArray()->all();
        $data = [
            'pagination' => $pagination,
            'list'=> $list,
        ];
        return $data;
    }

    public function myAnniversaryAchievementList() {
        $condition = null;
        if(!\Yii::$app->user->getIdentity()->getUserName() == 'admin') {
            $uuids = $this->getOrdinateUuids(RBACManager::CustomerModule);
            $condition[] = [
                [
                    'in',
                    self::$aliasMap['statistic'] . '.sales_uuid',
                    $uuids
                ]
            ];
        }

        return $this->anniversaryAchievementList($condition);
    }

    public function listFilter($filter) {
        if(empty($filter)) {
            return $this->myAnniversaryAchievementList();
        }

        $map = [
            'sales_name'=>[
                'like',
                self::$aliasMap['sales'] . '.name',
            ],
            'department_uuid'=>[
                '=',
                self::$aliasMap['department'] . '.uuid'
            ]
        ];

        $condition = [
            'and',
        ];
        if(!\Yii::$app->user->getIdentity()->getUserName() == 'admin') {
            $uuids = $this->getOrdinateUuids(RBACManager::CustomerModule);
            $condition[] = [
                [
                    'in',
                    self::$aliasMap['statistic'] . '.sales_uuid',
                    $uuids
                ]
            ];
        }
        foreach ($filter as $index => $item) {
            $condition[] = [
                $map[$index][0],
                $map[$index][1],
                trim($item),
            ];
        }

        return $this->anniversaryAchievementList($condition);
    }

    public function getRecord($uuid) {
        if(empty($uuid)) {
            return null;
        }

        return $this->anniversaryAchievementList([
                '=',
                self::$aliasMap['statistic'] . '.uuid',
                $uuid
            ],true);
    }
}