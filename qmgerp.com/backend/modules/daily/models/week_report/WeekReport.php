<?php
/**
 * Created by PhpStorm.
 * User: johnny
 * Date: 16-11-28
 * Time: 下午4:46
 */

namespace backend\modules\daily\models\week_report;


use backend\models\BaseRecord;
use backend\models\interfaces\DeleteRecordOperator;
use backend\models\interfaces\RecordOperator;
use backend\models\UUID;
use backend\modules\rbac\model\RBACManager;
use Yii;
use yii\db\Exception;
use backend\models\MyPagination;
use backend\modules\daily\models\transaction\Transaction;
use backend\modules\daily\models\transaction\TransactionConfig;

class WeekReport extends BaseRecord implements DeleteRecordOperator
{
    public static $aliasMap = [
        'week_report'=>'t1',
        'created'=>'t2',
    ];
    public static function tableName()
    {
        return self::DailyWeekReport;
    }

    public function formDataPreHandler(&$formData, $record)
    {
        if (empty($record)) {
            if (!isset($formData['uuid']) || empty($formData['uuid'])) {
                $formData['uuid'] = UUID::getUUID();
            }
            $formData['created_time'] = time();
        }
        parent::formDataPreHandler($formData, $record); // TODO: Change the autogenerated stub
    }

    public function insertRecord($formData)
    {
        if (empty($formData)) {
            return true;
        }

        if (!$this->updatePreHandler($formData)) {
            return true;
        }

        $transaction = Yii::$app->db->beginTransaction();
        try {
            $this->insert();
            if (isset($formData['transaction_uuid']) && !empty($formData['transaction_uuid'])) {
                $uuids = explode(',', trim($formData['transaction_uuid'],' ,'));
                $map = new WeekReportTransactionMap();
                $daliy_transaction = new Transaction();//
                $where = array();//
                foreach ($uuids as $uuid) {
                    $arg = preg_split('/and/', $uuid);
                    $map->insertSingleRecord([
                        'transaction_uuid'=>$arg[0],
                        'week_report_uuid'=>$formData['uuid'],
                        /**
                         * is_current_week_transaction 的值 为1表示而本周已完成的事项，2表示是下周工作计划
                         * 根据这个事项的状态来决定的，状态为1表示未完成事项，应该是下周工作计划
                         * 状态为2表示完成事项，是本周已经完成的事项
                         * 规律就是：状态为1，is_current_week_transaction字段值应该为2
                         * 状态为2，is_current_week_transaction字段值应该为1
                         */
                        'is_current_week_transaction'=> 3 - $arg[1],
                    ]); 

                    $where[] = $arg[0];

                }

                $daliy_transaction->updateTransactionStatus($where, TransactionConfig::StatusSubmitWeek);//
            }
        } catch (Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }
        $transaction->commit();
        return true;
    }

    public function deleteRecord($uuid)
    {
        if(empty($uuid)) {
            return true;
        }

        $record = self::find()->andWhere(['uuid'=>$uuid])->one();
        if (empty($record)) {
            return true;
        }

        $transaction = Yii::$app->db->beginTransaction();
        try {
            $weekReportTransactionMap = new WeekReportTransactionMap();
            $weekReportTransactionMap->deleteRecordByWeekReportUuid($uuid);
            $record->delete();
        } catch (Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }

        $transaction->commit();
        return true;
    }

    public function updateRecord($formData)
    {
        // TODO: Implement updateRecord() method.
    }

    public function myWeekReportList() {
        $uuids = $this->getOrdinateUuids(RBACManager::Common);
        return $this->weekReportList(
            [
                'week_report'=>[
                    '*'
                ],
                'created'=>[
                    'name'
                ]
            ],
            [
                'in',
                self::$aliasMap['week_report'] . '.created_uuid',
                $uuids
            ]
        );
    }

    public function listFilter($filter) {
        if (empty($filter)) {
            return $this->myWeekReportList();
        }

        $this->handlerFormDataTime($filter, 'min_created_time');
        $this->handlerFormDataTime($filter, 'max_created_time');

        $map = [
            'title'=>[
                'like',
                self::$aliasMap['week_report'] . '.title',
            ],
            'created_uuid'=>[
                '=',
                self::$aliasMap['week_report'] . '.created_uuid',
            ],
            'min_created_time'=>[
                '>=',
                self::$aliasMap['week_report'] . '.created_time',
            ],
            'max_created_time'=>[
                '<=',
                self::$aliasMap['week_report'] . '.created_time',
            ],
        ];

        $uuids = $this->getOrdinateUuids(RBACManager::Common);
        $condition = [
            'and',
            [
                'in',
                self::$aliasMap['week_report'] . '.created_uuid',
                $uuids
            ]
        ];
        foreach ($filter as $index => $value) {
            $condition[] = [
                $map[$index][0],
                $map[$index][1],
                $value
            ];
        }

        return $this->weekReportList(
            [
                'week_report'=>[
                    '*'
                ],
                'created'=>[
                    'name'
                ]
            ],
            $condition
        );
    }

    public function getRecord($uuid) {
        if (empty($uuid)) {
            return true;
        }

        return $this->weekReportList(
            [
                'week_report'=>[
                    '*'
                ],
                'created'=>[
                    'name'
                ]
            ],
            [
                '=',
                self::$aliasMap['week_report'] . '.uuid',
                $uuid
            ],
            true
        );
    }

    public function weekReportList($selects, $conditions = null,$fetchOne = false) {
        $selector = [];

        if (!empty($selects)) {
            foreach(self::$aliasMap as $key=>$alias) {
                if (isset($selects[$key])) {
                    foreach($selects[$key] as $select) {
                        if ($key === 'week_report') {
                            $select = trim($select);
                            $selector[] = $alias ."." . $select;
                        } else {
                            $select = trim($select);
                            $selector[] = $alias ."." . $select . " " . $key . "_" .$select;
                        }
                    }
                }
            }
        }

        $query = self::find()
            ->alias('t1')
            ->select($selector)
            ->leftJoin(self::EmployeeBasicInformationTableName . ' t2', 't1.created_uuid = t2.uuid');
        if(!empty($conditions)) {
            $query->andWhere($conditions);
        }


        if ($fetchOne) {
            $record = $query->asArray()->one();
            return $record;
        }

        $pagination = new MyPagination([
            'totalCount'=>$query->count(),
            'pageSize' => self::PageSize,
        ]);
        $list = $query->orderBy([
            't1.id' => SORT_DESC
        ])->offset($pagination->offset)->limit($pagination->limit)->asArray()->all();
        $data = [
            'pagination' => $pagination,
            'list'=> $list,
        ];
        return $data;
    }
}