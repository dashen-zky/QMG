<?php
namespace backend\modules\hr\models\ask_leave;
use backend\models\interfaces\DeleteRecordOperator;
use backend\models\BaseRecord;
use backend\models\UUID;
use backend\modules\hr\models\config\EmployeeBasicConfig;
use backend\models\MyPagination;
use backend\modules\rbac\model\RBACManager;
use Yii;
/**
 * Created by PhpStorm.
 * User: johnny
 * Date: 16-11-17
 * Time: 下午4:09
 */
class AskForLeave extends BaseRecord implements DeleteRecordOperator
{
    public static $aliasMap = [
        'ask_for_leave'=>'t1',
        'applied'=>'t2',
        'assess'=>'t3',
    ];

    public static function tableName()
    {
        return self::HrAskFormLeave;
    }

    public function getRecord($uuid) {
        if(empty($uuid)) {
            return '';
        }

        return $this->askForLeaveList(
            [
                'applied'=>[
                    'name',
                ],
                'ask_for_leave'=>[
                    '*'
                ],
                'assess'=>[
                    'name',
                ]
            ],
            [
                '=',
                self::$aliasMap['ask_for_leave'].'.uuid',
                $uuid
            ],
            true
        );
    }

    public function formDataPreHandler(&$formData, $record)
    {
        if(empty($record)) {
            if(!isset($formData['uuid']) || empty($formData['uuid'])) {
                $formData['uuid'] = UUID::getUUID();
            }
            $formData['status'] = EmployeeBasicConfig::AskLeaveApplying;
            $formData['created_time'] = time();
        }
        $this->handlerFormDataTime($formData, 'start_time');
        $this->handlerFormDataTime($formData, 'end_time');
        parent::formDataPreHandler($formData, $record); // TODO: Change the autogenerated stub
    }

    public function insertRecord($formData)
    {
        if(empty($formData)) {
            return true;
        }

        if(!$this->updatePreHandler($formData)) {
            return true;
        }

        return $this->insert();
    }

    public function deleteRecord($uuid)
    {
        if(empty($uuid)) {
            return true;
        }

        $record = self::find()->andWhere(['uuid'=>$uuid])->one();
        if(empty($record)) {
            return true;
        }

        return $record->delete();
    }

    public function assessPassed($uuid) {
        if(empty($uuid)) {
            return true;
        }

        return $this->updateRecord([
            'assess_uuid'=>Yii::$app->user->getId(),
            'uuid'=>$uuid,
            'status'=>EmployeeBasicConfig::AskLeaveSucceed
        ]);
    }

    public function assessRefused($uuid) {
        if(empty($uuid)) {
            return true;
        }

        return $this->updateRecord([
            'assess_uuid'=>Yii::$app->user->getId(),
            'uuid'=>$uuid,
            'status'=>EmployeeBasicConfig::AskLeaveRefused
        ]);
    }

    public function updateRecord($formData)
    {
        if(empty($formData)) {
            return true;
        }

        $record = self::find()->andWhere(['uuid'=>$formData['uuid']])->one();
        if(empty($record) || !$this->updatePreHandler($formData, $record)) {
            return true;
        }

        $values = $record->getDirtyAttributes();
        if(empty($values)) {
            return true;
        }
        return $record->update();
    }

    /**
     * 根据人事基本配置里面的‘请假周期审批’，
     * manager 可以审批第一个配置节点（0-1）
     * director可以审批第二个节点)（1-3）
     * ceo可以审批第三个节点（3-）
     */
    public function myAssessAskForLeaveList() {
        $assessPeriod = $this->getAssessPeriod();
        if(empty($assessPeriod)) {
            return null;
        }

        $list = $this->ordinateAskForLeaveList();
        if(empty($list)) {
            return null;
        }
        return $this->filterListByAssessPeriod($assessPeriod, $list);
    }

    public function ordinateAskForLeaveList() {
        $uuids = $this->getOrdinateUuidsWithoutSelf(RBACManager::Common);
        return $this->askForLeaveList(
            [
                'applied'=>[
                    'name',
                ],
                'ask_for_leave'=>[
                    '*'
                ],
                'assess'=>[
                    'name',
                ]
            ],
            [
                'in',
                self::$aliasMap['applied'].'.uuid',
                $uuids
            ]
        );
    }

    /**
     * 根据你可以审核的请假周期，过滤请假列表
     */
    protected function filterListByAssessPeriod($assessPeriod, $list) {
        preg_match_all('/\d+\.?\d*/', $assessPeriod, $match);
        if(empty($match)) {
            return null;
        }

        $maxTime = isset($match[0][1])?floatval($match[0][1]) * 3600 * 24:null;
        foreach ($list['list'] as $index => $item) {
            $value = $item['end_time'] - $item['start_time'];
            if(!$this->inPeriod($maxTime, $value)) {
                unset($list['list'][$index]);
            }
        }
        return $list;
    }

    /**
     * 根据最大时间周期和最小时间周期，
     * 来判断这条数据是否在这个数据里面
     * @param $min
     * @param $max
     * @param $value
     */
    protected function inPeriod($max, $value) {
        if(empty($max)) {
            return true;
        }

        return ($value < $max) ? true : false;
    }

    /**
     * 根据你的角色，获取你可以审核的请假周期
     */
    protected function getAssessPeriod() {
        $roles = array_keys(Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId()));
        $role = '';
        foreach ($roles as $item) {
            if(strpos($item, 'ceo') !== false) {
                $role = 'ceo';
                break;
            }

            if($role != 'ceo') {
                if(strpos($item, 'Director') !== false) {
                    $role = 'Director';
                    break;
                }
            }

            if(strpos($item, 'Manager') !== false) {
                $role = 'Manager';
                break;
            }
        }

        if(empty($role)) {
            return null;
        }

        $assessConfigList = array_values((new EmployeeBasicConfig())->getList('ask_for_leave_assess_period'));
        if(empty($assessConfigList)) {
            return null;
        }
        switch ($role) {
            case 'Manager':
                return $assessConfigList[0];
            case 'Director':
                return $assessConfigList[1];
            case 'ceo':
                return $assessConfigList[2];
        }
        return null;
    }

    /**
     * 人事入口的请假列表
     */
    public function askForLeaveListForHumanResource() {
        return $this->askForLeaveList(
            [
                'applied'=>[
                    'name',
                ],
                'ask_for_leave'=>[
                    '*'
                ],
                'assess'=>[
                    'name',
                ]
            ]
        );
    }

    public function myAskForLeaveList() {
        $uuids = $this->getOrdinateUuids(RBACManager::Common);
        return $this->askForLeaveList(
            [
                'applied'=>[
                    'name',
                ],
                'ask_for_leave'=>[
                    '*'
                ],
                'assess'=>[
                    'name',
                ]
            ],
            [
                'in',
                self::$aliasMap['applied'].'.uuid',
                $uuids
            ]
        );
    }

    public function assessListFilter($filter) {
        $assessPeriod = $this->getAssessPeriod();
        if(empty($assessPeriod)) {
            return null;
        }

        $list = $this->listFilterForAssess($filter);
        if(empty($list)) {
            return null;
        }
        return $this->filterListByAssessPeriod($assessPeriod, $list);
    }

    public function hrListFilter($filter) {
        if(empty($filter)) {
            return $this->askForLeaveListForHumanResource();
        }

        $map = [
            'applied_name'=>[
                'like',
                self::$aliasMap['applied'] . '.name',
            ],
            'type'=>[
                '=',
                self::$aliasMap['ask_for_leave'] . '.type',
            ],
            'department'=>[
                'like',
                self::$aliasMap['ask_for_leave'] . '.department',
            ],
            'status'=>[
                '=',
                self::$aliasMap['ask_for_leave'] . '.status',
            ],
        ];
        $condition = [
            'and',
        ];
        foreach ($filter as $index => $value) {
            $condition[] = [
                $map[$index][0],
                $map[$index][1],
                $value,
            ];
        }

        return $this->askForLeaveList(
            [
                'applied'=>[
                    'name',
                ],
                'ask_for_leave'=>[
                    '*'
                ],
                'assess'=>[
                    'name',
                ]
            ],
            $condition
        );
    }

    public function listFilterForAssess($filter) {
        if(empty($filter)) {
            return $this->myAskForLeaveList();
        }

        $map = [
            'applied_name'=>[
                'like',
                self::$aliasMap['applied'] . '.name',
            ],
            'type'=>[
                '=',
                self::$aliasMap['ask_for_leave'] . '.type',
            ],
            'department'=>[
                'like',
                self::$aliasMap['ask_for_leave'] . '.department',
            ],
            'status'=>[
                '=',
                self::$aliasMap['ask_for_leave'] . '.status',
            ],
        ];
        $condition = [
            'and',
            [
                'in',
                self::$aliasMap['applied'].'.uuid',
                $this->getOrdinateUuidsWithoutSelf(RBACManager::Common),
            ]
        ];
        foreach ($filter as $index => $value) {
            $condition[] = [
                $map[$index][0],
                $map[$index][1],
                $value,
            ];
        }

        return $this->askForLeaveList(
            [
                'applied'=>[
                    'name',
                ],
                'ask_for_leave'=>[
                    '*'
                ],
                'assess'=>[
                    'name',
                ]
            ],
            $condition
        );
    }

    public function listFilter($filter) {
        if(empty($filter)) {
            return $this->myAskForLeaveList();
        }

        $map = [
            'applied_name'=>[
                'like',
                self::$aliasMap['applied'] . '.name',
            ],
            'type'=>[
                '=',
                self::$aliasMap['ask_for_leave'] . '.type',
            ],
            'department'=>[
                'like',
                self::$aliasMap['ask_for_leave'] . '.department',
            ],
            'status'=>[
                '=',
                self::$aliasMap['ask_for_leave'] . '.status',
            ],
        ];
        $condition = [
            'and',
            [
                'in',
                self::$aliasMap['applied'].'.uuid',
                $this->getOrdinateUuids(RBACManager::Common),
            ]
        ];
        foreach ($filter as $index => $value) {
            $condition[] = [
                $map[$index][0],
                $map[$index][1],
                $value,
            ];
        }

        return $this->askForLeaveList(
            [
                'applied'=>[
                    'name',
                ],
                'ask_for_leave'=>[
                    '*'
                ],
                'assess'=>[
                    'name',
                ]
            ],
            $condition
        );
    }

    public function askForLeaveList($selects, $conditions = null,$fetchOne = false) {
        $selector = [];

        if (!empty($selects)) {
            foreach(self::$aliasMap as $key=>$alias) {
                if (isset($selects[$key])) {
                    foreach($selects[$key] as $select) {
                        if(in_array($key, [
                            'applied',
                            'assess',
                        ])) {
                            $select = trim($select);
                            $selector[] = $alias ."." . $select . " " . $key . "_" .$select;
                        } elseif ($key === 'ask_for_leave') {
                            $select = trim($select);
                            $selector[] = $alias ."." . $select;
                        }
                    }
                }
            }
        }

        $query = self::find()
            ->alias('t1')
            ->select($selector)
            ->leftJoin(self::EmployeeBasicInformationTableName . ' t2', 't1.created_uuid = t2.uuid')
            ->leftJoin(self::EmployeeBasicInformationTableName . ' t3', 't1.assess_uuid = t3.uuid')
            ->andWhere($conditions);

        if ($fetchOne) {
            $record = $query->asArray()->one();
            return $record;
        }

        $pagination = new MyPagination([
            'totalCount'=>$query->count(),
            'pageSize' => self::PageSize,
        ]);
        $list = $query->orderBy([
            't1.status'=>SORT_ASC,
            't1.id'=>SORT_DESC,
        ])->offset($pagination->offset)->limit($pagination->limit)->asArray()->all();
        $data = [
            'pagination' => $pagination,
            'list'=> $list,
        ];
        return $data;
    }
}