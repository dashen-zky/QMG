<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2016/7/3 0003
 * Time: 下午 6:20
 */

namespace backend\modules\hr\models;

use backend\modules\hr\models\HrBaseActiveRecord;
use backend\modules\hr\models\Department;
use backend\modules\hr\models\DepartmentForm;
use vakata\database\Exception;
use backend\models\UUID;
use backend\models\MyPagination;
use backend\modules\hr\models\hrinterfaces\HrRecordOperator;
use Yii;
use backend\modules\hr\models\hrinterfaces\HrPrimaryTable;
use yii\helpers\Json;

/**
 * department model
 *
 * @property integer $id
 * @property string $uuid
 * @property string $name
 * @property string $de_uuid
 * @property string $level
 * @property string $remarks
 * @property string $description
 * @property string $requirement
 * @property string $duty
 * @property string $salary_end
 * @property string $salary_start
 * @property string $attachment
 */
class Position extends HrBaseActiveRecord implements HrRecordOperator,HrPrimaryTable
{
    public $departmentName;
    public $departmentDescription;
    public $parentDepartmentName;
    public $parentDepartmentLevel;
    static public function tableName()
    {
        return self::PositionTableName;
    }

    public function getDepartmentListFromLevel($level) {
        if (empty($level) || !isset($level)) {
            return false;
        }
        $department = new Department();
        $departmentInfo = $department->parentDepartmentList($level);

        if(count($departmentInfo['departmentList']) > 0) {

            return $departmentInfo;
        }
        // 底层员工的等级会比部门等级小一级
        $level--;
        $departmentInfo = $department->parentDepartmentList($level);
        try{
            if (count($departmentInfo['departmentList']) == 0) {
                throw new Exception('职位等级输入异常');
            }
            return $departmentInfo;
        } catch(Exception $e) {
            return 'Message: ' .$e->getMessage();
        }
    }

    public function dismiss($uuid) {
        if (empty($uuid)) {
            return true;
        }

        $record = self::find()->andWhere(['uuid'=>$uuid])->one();
        if (empty($record)) {
            return true;
        }

        $record->number_of_active = $record->number_of_active - 1;
        return $record->update();
    }

    public function formDataPreHandler(&$formData, $record)
    {
        if(empty($record)) {
            if(!isset($formData['uuid']) || empty($formData['uuid'])) {
                $formData['uuid'] = UUID::getUUID();
            }
        }
        if(isset($formData['department'])) {
            $len = count($formData['department']);
            for($i = $len; $i > 0; $i--) {
                if($formData['department'][$i] != 0) {
                    $formData['de_uuid'] = $formData['department'][$i];
                    break;
                }
            }
        }
        parent::formDataPreHandler($formData, $record); // TODO: Change the autogenerated stub
    }

    public function insertRecord($formData = null)
    {
        if (empty($formData)) {
            return false;
        }
        // prepare department data
        if(!$this->updatePreHandler($formData)) {
            return false;
        }
        try {
            parent::insert();
        } catch(Exception $e) {
            echo "message:" . $e->getMessage();
            return false;
        }

        return true;
    }

    public function allPositionList() {
        $list = $this->positionList();
        foreach ($list['positionList'] as $index => $item) {
            if (!empty($item['parent_departments'])) {
                $parent_departments = Json::decode($item['parent_departments']);
            }
            $parent_departments[] = $item['de_uuid'];
            $records = Department::find()->select(['uuid','name'])->andWhere([
                'in',
                'uuid',
                $parent_departments,
            ])->asArray()->all();
            $list['positionList'][$index]['parent_departments'] = $this->transformForDropDownList($records, 'uuid', 'name');
        }
        return $list;
    }


    public function deleteRecordByUuid($uuid)
    {
        if(!isset($uuid) || empty($uuid)) {
            return false;
        }
        $record = self::find()->andWhere(['uuid'=>$uuid])->one();
        $employeePositionMap = new EmployeePositionMap();
        $transaction = Yii::$app->db->beginTransaction();
        try {
            $employeePositionMap->deleteAll(['position_uuid'=>$record->uuid]);
            $record->delete();
        } catch(\yii\db\Exception $e) {
            $transaction->rollBack();
            return false;
        }
        $transaction->commit();
        return true;
    }

    public function updateRecord($formData) {
        if (!isset($formData) || empty($formData)) {
            return false;
        }
        $record = self::find()->andWhere(['uuid'=>$formData['uuid']])->one();
        if(empty($record) || !$this->updatePreHandler($formData, $record)) {
            return false;
        }

        $values = $record->getDirtyAttributes();
        if(empty($values)) {
            return true;
        }

        return $record->update();
    }

    public function getRecordByUuid($uuid) {
        if (!isset($uuid) || empty($uuid)) {
            return false;
        }
        $record =  $this->positionList([
            'position'=>[
                'uuid="'.$uuid . '"',
            ]
        ],true);

        $department = Department::find()->andWhere(['uuid'=>$record['de_uuid']])->asArray()->one();
        $dpt = new Department();
        if(isset($department['parent_departments']) && !empty($department['parent_departments'])) {
            $department['parent_departments'] = Json::decode($department['parent_departments']);
            //1表示公司层级的部门
            //2表示事业部层级的部门
            //3表示部门层级的部门
            $department['parent_departments'][$department['level']] = $department['uuid'];
            for($i = 1; $i <= count($department['parent_departments']); $i++) {
                $record['department_level_'.$i] = $department['parent_departments'][$i];
                // 1表示公司层级的部门，所以没有上级部门
                if($i == 1) {
                    $record['department'][$i] = $dpt->getDepartmentsForDropDownList($i);
                } else {
                    $record['department'][$i] = $dpt->getDepartmentsForDropDownList($i, $department['parent_departments'][$i-1]);
                }
                // 除了通过等级和上级uuid找个现在的部门列表，还要找到下级的部门列表
                $record['department'][$i+1] = $dpt->getDepartmentsForDropDownList($i+1, $department['parent_departments'][$i]);
            }
        } else {
            $record['department'][1] = $dpt->getDepartmentsForDropDownList(1);
            $record['department_level_1'] = $department['uuid'];
            $record['department'][2] = $dpt->getDepartmentsForDropDownList(2, $department['uuid']);
        }
        return $record;
    }

    public function positionList($conditions = null, $fetchOne = false, $enablePage = true) {
        $aliasMap = [
            'position'=>'t1',
            'department'=>'t2',
        ];

        $query = self::find()->
        alias($aliasMap['position'])->
        select([
            't1.*',
            't2.name departmentName',
            't2.level departmentLevel',
            't2.parent_departments parent_departments',
            't4.name parentDepartmentName',
            't4.level parentDepartmentLevel'
        ])->
        leftJoin(self::DepartmentTableName .' t2','t1.de_uuid=t2.uuid')->
        leftJoin(self::DepartmentRelationTableName .' t3','t3.child_uuid = t2.uuid')->
        leftJoin(self::DepartmentTableName .' t4','t4.uuid = t3.parent_uuid');


        if(!empty($conditions)) {
            foreach($aliasMap as $key=>$alias) {
                if (isset($conditions[$key])) {
                    foreach($conditions[$key] as $k => $condition) {
                        if(!is_array($condition)) {
                            $condition = trim($condition);
                            $query->andWhere(
                                $alias . "." . $condition
                            );
                            continue;
                        }

                        $query->andWhere([
                            $condition[0],
                            $alias . '.' . $k,
                            $condition[1],
                        ]);
                    }
                }
            }
        }
        if($fetchOne) {
            return $query->asArray()->one();
        }
        if(!$enablePage) {
            return $query->orderBy('t1.code')->asArray()->all();
        }

        $pagination = new MyPagination([
            'totalCount' => $query->count(),
            'pageSize' => self::PageSize,
        ]);

        $positionList = $query->orderBy('t1.code')->offset($pagination->offset)->limit($pagination->limit)->asArray()->all();
        $data = [
            'positionList' => $positionList,
            'pagination' => $pagination,
        ];
        return $data;
    }

    public function positionListByDepartmentUuid($department_uuid, $departments = null) {
        if(empty($departments)) {
            $departments = (new Department())->childDepartments($department_uuid);
        }

        $list = $this->positionList(
            [
                'department'=>[
                    'uuid'=>[
                        'in',
                        $departments,
                    ]
                ],
            ],
            false,
            false
        );
        return $list;
    }

    /**
     * 获取某个人可以招聘的职位列表，是drop down list的形式
     */
    public function canRecruitPositionList() {
        $departmentList = Department::find()->select(['t1.uuid'])
            ->alias('t1')
            ->leftJoin(self::PositionTableName . ' t2', 't2.de_uuid = t1.uuid')
            ->leftJoin(self::EmployeePositionMapTableName . ' t3', 't3.position_uuid = t2.uuid')
            ->andWhere(['t3.em_uuid'=>Yii::$app->getUser()->getIdentity()->getId()])
            ->asArray()->all();
        $_list = [];
        foreach ($departmentList as $item) {
            $_list += $this->positionDropDownList($item['uuid']);
        }
        return $_list;
    }

    // 根据条件获取Position的列表，并且变成drop down list的形式
    public function positionListDropDown($condition = null) {
        $list = empty($condition)?
            self::find()->select([
                'uuid', 'name'
            ])->asArray()->all()
            :
            self::find()->select([
                'uuid', 'name'
            ])->andWhere($condition)->asArray()->all();
        return $this->transformForDropDownList($list, 'uuid', 'name');
    }

    public function positionDropDownList($department_uuid, $departments = null) {
        $list = $this->positionListByDepartmentUuid($department_uuid, $departments);
        if(empty($list)) {
            return [];
        }
        $_list = [];
        foreach($list as $item) {
            $_list[$item['uuid']] = $item['name'];
        }
        return $_list;
    }

    // 列表过滤
    public function listFilter($filter, $enablePage=true) {
        if(empty($filter)) {
            return $this->allPositionList();
        }

        $map = [
            'department'=>[
                'uuid'
            ]
        ];

        $condition = [];
        // 通过部门来过滤职位,部门传进来必须是数组
        if(isset($filter['department']) && !empty($filter['department'])) {
            $condition['department']['uuid'] = [
                '=',
                end($filter['department']),
            ];
        }
        return $this->positionList($condition, false, $enablePage);
    }
}