<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2016/9/20 0020
 * Time: 上午 11:06
 */

namespace backend\modules\hr\models;
use backend\models\interfaces\Map;
use Yii;
use backend\models\interfaces\RecordOperator;

class DepartmentDutyMap extends HrBaseActiveRecord implements RecordOperator, Map
{
    public static function tableName()
    {
        return self::DepartmentDutyMap;
    }

    public function getDepartmentsByDuty($uuid) {
        if(empty($uuid)) {
            return false;
        }

        return self::find()->andWhere(['duty_uuid'=>$uuid])->asArray()->all();
    }

    public function recordPreHandler(&$formData, $record = null)
    {
        if(empty($record)) {
            $this->setOldAttribute('duty_uuid', null);
            $this->setOldAttribute('department_uuid', null);
            $this->setOldAttribute('created_uuid', null);
        }
        parent::recordPreHandler($formData, $record); // TODO: Change the autogenerated stub
    }

    public function insertSingleRecord($formData)
    {
        if(empty($formData)) {
            return false;
        }

        if(!$this->updatePreHandler($formData)) {
            return false;
        }

        return $this->insert();
    }

    public function insertRecord($formData)
    {
        if(empty($formData) || !isset($formData['duty_uuid']) || empty($formData['duty_uuid'])) {
            return true;
        }

        $duty_uuids = explode(',', trim( $formData['duty_uuid'], ','));
        foreach($duty_uuids as $duty_uuid) {
            $this->insertSingleRecord([
                'duty_uuid'=>$duty_uuid,
                'department_uuid'=>$formData['department_uuid'],
            ]);
        }
    }

    public function updateSingleRecord($formData)
    {
        // TODO: Implement updateSingleRecord() method.
    }

    public function updateRecord($formData)
    {
        if(empty($formData)) {
            return true;
        }

        $records = self::find()
            ->andWhere(['department_uuid'=>$formData['department_uuid']])->asArray()->all();
        $old = $this->getAppointedValue($records, 'duty_uuid');
        if(empty($old) && empty($formData['duty_uuid'])) {
            return true;
        }

        $new = explode(',', $formData['duty_uuid']);
        $shouldInsert = array_diff($new, $old);
        $shouldDelete = array_diff($old, $new);
        $transaction = Yii::$app->db->beginTransaction();
        try {
            foreach($shouldDelete as $uuid) {
                $this->deleteAll([
                    'department_uuid'=>$formData['department_uuid'],
                    'duty_uuid'=>$uuid
                ]);
            }

            foreach($shouldInsert as $uuid) {
                $this->insertSingleRecord([
                    'department_uuid'=>$formData['department_uuid'],
                    'duty_uuid'=>$uuid,
                ]);
            }
        } catch (Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }
        $transaction->commit();
        return true;
    }
}