<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2016/7/8 0008
 * Time: 下午 11:22
 */

namespace backend\modules\hr\models;

use backend\models\helper\ArrayHelper;
use backend\modules\hr\models\HrBaseActiveRecord;
use backend\modules\hr\models\hrinterfaces\HrRecordOperator;
use yii\helpers\Json;

class EmployeeBasicAttachmentInformation extends HrBaseActiveRecord implements HrRecordOperator
{
    static public function tableName()
    {
        return self::EmployeeBasicAttachmentInformationTableName;
    }

    public function formDataPreHandler(&$formData, $record)
    {
        if (isset($formData['bank_account']) && !empty($formData['bank_account'])) {
            $formData['bank_account'] = Json::encode(ArrayHelper::filterEmptyArrayForDyadic($formData['bank_account']));
        }
        if (isset($formData['salary_adjust_record']) && !empty($formData['salary_adjust_record'])) {
            $formData['salary_adjust_record'] = Json::encode(ArrayHelper::filterEmptyArrayForDyadic($formData['salary_adjust_record']));
        }
        if (isset($formData['social_insurance_adjust_record']) && !empty($formData['social_insurance_adjust_record'])) {
            $formData['social_insurance_adjust_record'] = Json::encode(ArrayHelper::filterEmptyArrayForDyadic($formData['social_insurance_adjust_record']));
        }
        if (isset($formData['house_fund_adjust_record']) && !empty($formData['house_fund_adjust_record'])) {
            $formData['house_fund_adjust_record'] = Json::encode(ArrayHelper::filterEmptyArrayForDyadic($formData['house_fund_adjust_record']));
        }
        parent::formDataPreHandler($formData, $record); // TODO: Change the autogenerated stub
    }

    public function insertRecord($formData)
    {
        $this->em_uuid = $formData['uuid'];
        if(!$this->updatePreHandler($formData)) {
            return false;
        }
        return parent::insert();
    }

    public function updateRecord($formData)
    {
        $oldRecord = self::find()->andWhere(['em_uuid'=>$formData['uuid']])->one();
        if(empty($oldRecord)) {
            return $this->insertRecord($formData);
        }
        if (!$this->updatePreHandler($formData, $oldRecord)) {
            return true;
        }
        
        $values = $oldRecord->getDirtyAttributes();
        if(empty($values)) {
            return true;
        }

        return $oldRecord->update();
    }
    
    public function getRecord($uuid) {
        if(empty($uuid)) {
            return null;
        }
        
        return self::find()->andWhere(['em_uuid'=>$uuid])->asArray()->one();
    }
}