<?php
namespace backend\modules\hr\recruitment\models;
use backend\models\BaseRecord;
use backend\models\interfaces\DeleteRecordOperator;
use backend\models\UUID;
use backend\models\MyPagination;
use backend\modules\rbac\model\RBACManager;

/**
 * Created by PhpStorm.
 * User: johnny
 * Date: 16-12-8
 * Time: 下午11:48
 */
class ApplyRecruit extends BaseRecord implements DeleteRecordOperator
{
    public static $aliasMap = [
        'apply_recruit'=>'t1',
        'created'=>'t2',
        'position'=>'t3',
        'assess'=>'t4',
    ];
    public static function tableName()
    {
        return self::HrApplyRecruit;
    }

    public function formDataPreHandler(&$formData, $record)
    {
        if (empty($record)) {
            if (!isset($formData['uuid']) || empty($formData['uuid'])) {
                $formData['uuid'] = UUID::getUUID();
            }

            $formData['created_time'] = time();
            $formData['status'] = ApplyRecruitConfig::StatusApplying;
        }

        $this->handlerFormDataTime($formData,'entry_time');
        parent::formDataPreHandler($formData, $record); // TODO: Change the autogenerated stub
    }

    public function insertRecord($formData)
    {
        if(empty($formData)) {
            return true;
        }

        if (!$this->updatePreHandler($formData)) {
            return true;
        }

        return $this->insert();
    }

    public function deleteRecord($uuid)
    {
        if (empty($uuid)) {
            return true;
        }

        $record = self::find()->andWhere(['uuid'=>$uuid])->one();
        if (empty($record)) {
            return true;
        }

        return $record->delete();
    }

    public function updateRecord($formData)
    {
        if (empty($formData) || empty($formData['uuid'])) {
            return true;
        }

        $record = self::find()->andWhere(['uuid'=>$formData['uuid']])->one();
        if (empty($record) || !$this->updatePreHandler($formData, $record)) {
            return true;
        }

        $record->update();
        return true;
    }

    public function getRecord($uuid) {
        if (empty($uuid)) {
            return null;
        }

        $formData =  $this->applyRecruitList(
            [
                'apply_recruit'=>[
                    '*'
                ],
                'created'=>[
                    'name'
                ],
                'assess'=>[
                    'name'
                ],
                'position'=> [
                    'uuid',
                    'name',
                    'requirement',
                    'number_of_active',
                    'members_limit'
                ]
            ],
            [
                '=',
                self::$aliasMap['apply_recruit'] . '.uuid',
                $uuid
            ],true
        );
        $formData['rest_number'] = $formData['position_members_limit'] - $formData['position_number_of_active'];
        return $formData;
    }

    public function myAssessApplyRecruitList() {
        return $this->applyRecruitList(
            [
                'apply_recruit'=>[
                    '*'
                ],
                'created'=>[
                    'name'
                ],
                'position'=> [
                    'name',
                    'requirement',
                ]
            ],
            [
                'in',
                self::$aliasMap['apply_recruit'] . '.created_uuid',
                $this->getOrdinateUuidsWithoutSelf(RBACManager::Common)
            ]
        );
    }

    public function myApplyRecruitList() {
        return $this->applyRecruitList(
            [
                'apply_recruit'=>[
                    '*'
                ],
                'created'=>[
                    'name'
                ],
                'position'=> [
                    'name',
                    'requirement',
                ]
            ],
            [
                'in',
                self::$aliasMap['apply_recruit'] . '.created_uuid',
                $this->getOrdinateUuids(RBACManager::Common)
            ]
        );
    }

    public function recommendCandidateListFilter($filter) {
        if(empty($filter)) {
            return $this->applyRecruitList(
                [
                    'apply_recruit'=>[
                        '*'
                    ],
                    'created'=>[
                        'name'
                    ],
                    'position'=> [
                        'name',
                        'requirement',
                    ]
                ],
                [
                    '=',
                    self::$aliasMap['apply_recruit'] . '.status',
                    ApplyRecruitConfig::StatusRecruiting,
                ]
            );
        }

        $map = [
            'position_uuid'=>[
                '=',
                self::$aliasMap['apply_recruit'] . '.position_uuid'
            ],
            'created_name'=>[
                'like',
                self::$aliasMap['created'] . '.name',
            ],
            'status'=>[
                '=',
                self::$aliasMap['apply_recruit'] . '.status'
            ],
        ];
        $condition = [
            'and',
            [
                '=',
                self::$aliasMap['apply_recruit'] . '.status',
                ApplyRecruitConfig::StatusRecruiting,
            ]
        ];
        foreach ($filter as $index => $value) {
            $condition[] = [
                $map[$index][0],
                $map[$index][1],
                $value,
            ];
        }

        return $this->applyRecruitList(
            [
                'apply_recruit'=>[
                    '*'
                ],
                'created'=>[
                    'name'
                ],
                'position'=> [
                    'name',
                    'requirement',
                ]
            ],
            $condition
        );
    }

    public function assessListFilter($filter) {
        if(empty($filter)) {
            return $this->myAssessApplyRecruitList();
        }

        $map = [
            'position_uuid'=>[
                '=',
                self::$aliasMap['apply_recruit'] . '.position_uuid'
            ],
            'created_name'=>[
                'like',
                self::$aliasMap['created'] . '.name',
            ],
            'status'=>[
                '=',
                self::$aliasMap['apply_recruit'] . '.status'
            ],
        ];
        $condition = [
            'and',
            [
                'in',
                self::$aliasMap['apply_recruit'] . '.created_uuid',
                $this->getOrdinateUuidsWithoutSelf(RBACManager::Common)
            ]
        ];
        foreach ($filter as $index => $value) {
            $condition[] = [
                $map[$index][0],
                $map[$index][1],
                $value,
            ];
        }

        return $this->applyRecruitList(
            [
                'apply_recruit'=>[
                    '*'
                ],
                'created'=>[
                    'name'
                ],
                'position'=> [
                    'name',
                    'requirement',
                ]
            ],
            $condition
        );
    }

    public function listFilter($filter) {
        if(empty($filter)) {
            return $this->myApplyRecruitList();
        }

        $map = [
            'position_uuid'=>[
                '=',
                self::$aliasMap['apply_recruit'] . '.position_uuid'
            ],
            'created_name'=>[
                'like',
                self::$aliasMap['created'] . '.name',
            ],
            'status'=>[
                '=',
                self::$aliasMap['apply_recruit'] . '.status'
            ],
        ];
        $condition = [
            'and',
            [
                'in',
                self::$aliasMap['apply_recruit'] . '.created_uuid',
                $this->getOrdinateUuids(RBACManager::Common)
            ]
        ];
        foreach ($filter as $index => $value) {
            $condition[] = [
                $map[$index][0],
                $map[$index][1],
                trim($value),
            ];
        }

        return $this->applyRecruitList(
            [
                'apply_recruit'=>[
                    '*'
                ],
                'created'=>[
                    'name'
                ],
                'position'=> [
                    'name',
                    'requirement',
                ]
            ],
            $condition
        );
    }

    public function applyRecruitList($selects, $conditions = null,$fetchOne = false) {
        $selector = [];

        if (!empty($selects)) {
            foreach(self::$aliasMap as $key=>$alias) {
                if (isset($selects[$key])) {
                    foreach($selects[$key] as $select) {
                        if ($key === 'apply_recruit') {
                            $select = trim($select);
                            $selector[] = $alias ."." . $select;
                        } else {
                            $select = trim($select);
                            $selector[] = $alias ."." . $select . " " . $key . "_" .$select;
                        }
                    }
                }
            }
        }

        $query = self::find()
            ->alias('t1')
            ->select($selector)
            ->leftJoin(self::EmployeeBasicInformationTableName . ' t2', 't1.created_uuid = t2.uuid')
            ->leftJoin(self::PositionTableName . ' t3', 't1.position_uuid = t3.uuid')
            ->leftJoin(self::EmployeeBasicInformationTableName . ' t4', 't1.assess_uuid = t4.uuid');
        if(!empty($conditions)) {
            $query->andWhere($conditions);
        }

        if ($fetchOne) {
            $record = $query->asArray()->one();
            return $record;
        }

        $pagination = new MyPagination([
            'totalCount'=>$query->count(),
            'pageSize' => self::PageSize,
        ]);
        $list = $query->orderBy([
            't1.id' => SORT_DESC,
        ])->offset($pagination->offset)->limit($pagination->limit)->asArray()->all();
        $data = [
            'pagination' => $pagination,
            'list'=> $list,
        ];
        return $data;
    }
}