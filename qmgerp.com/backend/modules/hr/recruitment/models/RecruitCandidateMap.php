<?php
/**
 * Created by PhpStorm.
 * User: johnny
 * Date: 16-12-11
 * Time: 下午10:10
 */

namespace backend\modules\hr\recruitment\models;

use backend\models\BaseRecord;
use backend\models\interfaces\DeleteMapRecord;
use backend\modules\daily\models\regulation\RegulationConfig;
use backend\modules\hr\models\EmployeeAccount;
use backend\modules\hr\models\EmployeeBasicInformation;
use backend\modules\rbac\model\RBACManager;
use Yii;
use yii\db\Exception;
use backend\models\MyPagination;

class RecruitCandidateMap extends BaseRecord implements DeleteMapRecord
{
    public static $aliasMap = [
        'recruit_candidate_map'=>'t1',
        'candidate'=>'t2',
        'recruit'=>'t3',
        'position'=>'t4',
        'interview'=>'t5',
    ];
    public static function tableName()
    {
        return self::HrRecruitCandidateMap;
    }

    /**
     * 解除招聘和候选人之间的关系
     * @param $formData
     * @return bool
     */
    public function dropRecruitAndCandidateRelation($formData) {
        if (empty($formData) ||
        empty($formData['candidate_uuid']) || empty($formData['recruit_uuid'])) {
            return true;
        }

        $transaction = Yii::$app->db->beginTransaction();
        try {
            foreach ($formData['candidate_uuid'] as $candidate_uuid) {
                $this->deleteSingleRecord($formData['recruit_uuid'], $candidate_uuid);
            }
        } catch (Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }

        $transaction->commit();
        return true;
    }

    public function notifyInterView($formData) {
        if (empty($formData) ||
            empty($formData['candidate_uuid']) || empty($formData['recruit_uuid'])) {
            return true;
        }

        $transaction = Yii::$app->db->beginTransaction();
        try {
            foreach ($formData['candidate_uuid'] as $candidate_uuid) {
                $this->updateSingleRecord([
                    'candidate_uuid'=>$candidate_uuid,
                    'recruit_uuid'=>$formData['recruit_uuid'],
                    'status'=>CandidateConfig::StatusNotifyInterView,
                ]);
            }
        } catch (Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }

        $transaction->commit();
        return true;
    }

    public function recordPreHandler(&$formData, $record = null)
    {
        if(empty($record)) {
            $this->setOldAttribute('recruit_uuid', null);
            $this->setOldAttribute('candidate_uuid', null);
        }
        parent::recordPreHandler($formData, $record); // TODO: Change the autogenerated stub
    }

    public function insertSingleRecord($formData)
    {
        if(empty($formData)) {
            return true;
        }

        if(!$this->updatePreHandler($formData)) {
            return true;
        }

        return $this->insert();
    }

    public function formDataPreHandler(&$formData, $record)
    {
        $this->handlerFormDataTime($formData, 'interview_time');
        $this->handlerFormDataTime($formData, 'entry_time');
        parent::formDataPreHandler($formData, $record); // TODO: Change the autogenerated stub
    }

    public function updateSingleRecord($formData)
    {
        if(empty($formData) ||
        !isset($formData['recruit_uuid']) || empty($formData['recruit_uuid']) ||
        !isset($formData['candidate_uuid']) || empty($formData['candidate_uuid'])) {
            return true;
        }

        $record = self::find()->andWhere([
                    'recruit_uuid'=>$formData['recruit_uuid'],
                    'candidate_uuid'=>$formData['candidate_uuid']
                ])->one();
        if(empty($record) || !$this->updatePreHandler($formData, $record)) {
            return true;
        }

        $record->update();
        return true;
    }

    public function deleteSingleRecord($uuid1, $uuid2)
    {
        if(empty($uuid1) || empty($uuid2)) {
            return true;
        }

        $record = self::find()->andWhere(['recruit_uuid'=>$uuid1, 'candidate_uuid'=>$uuid2])->one();
        if(empty($record)) {
            return true;
        }

        return $record->delete();
    }

    public function updateRecord($formData) {
        if(empty($formData) || !isset($formData['recruit_uuid'])
            || empty($formData['recruit_uuid'])) {
            return true;
        }

        $records = self::find()->select(['candidate_uuid'])->andWhere(['recruit_uuid'=>$formData['recruit_uuid']])->asArray()->all();
        $old_candidate_uuid = $this->getAppointedValue($records, 'candidate_uuid');
        $new_candidate_uuid = explode(',', trim($formData['candidate_uuid'], ' ,'));

        $should_insert = array_diff($new_candidate_uuid, $old_candidate_uuid);
        $should_delete = array_diff($old_candidate_uuid, $new_candidate_uuid);

        $transaction = Yii::$app->db->beginTransaction();
        try {
            foreach ($should_delete as $uuid) {
                $this->deleteSingleRecord($formData['recruit_uuid'], $uuid);
            }

            foreach ($should_insert as $uuid) {
                $this->insertSingleRecord([
                    'recruit_uuid' => $formData['recruit_uuid'],
                    'candidate_uuid' => $uuid
                ]);
            }
        } catch (Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }

        $transaction->commit();
        return true;
    }

    public function getCandidateUuidsByRecruitUuid($uuid) {
        if (empty($uuid)) {
            return null;
        }

        return $this->getAppointedValue(self::find()->select('candidate_uuid')->andWhere(['recruit_uuid'=>$uuid])->asArray()->all(), 'candidate_uuid');
    }

    public function getCandidate($recruit_uuid, $candidate_uuid) {
        if(empty($recruit_uuid) || empty($candidate_uuid)) {
            return null;
        }

        return self::find()->select([
                't2.*','t1.*','t3.position_uuid'
            ])->alias('t1')->leftJoin(self::HrCandidate . ' t2', 't1.candidate_uuid = t2.uuid')
            ->leftJoin(self::HrApplyRecruit . ' t3', 't1.recruit_uuid = t3.uuid')
            ->andWhere([
                'and',
                [
                    '=',
                    't1.candidate_uuid',
                    $candidate_uuid,
                ],
                [
                    '=',
                    't1.recruit_uuid',
                    $recruit_uuid
                ]
            ])->asArray()->one();
    }

    public function getCandidateListByRecruitUuid($uuid) {
        return $this->candidateList(
            [
                'recruit_candidate_map'=>[
                    '*'
                ],
                'candidate'=>[
                    'id',
                    'uuid',
                    'name',
                    'phone',
                    'email',
                    'position',
                    'remarks',
                    'resume',
                ],
            ],
            [
                '=',
                self::$aliasMap['recruit_candidate_map'] .'.recruit_uuid',
                $uuid
            ]
        );
    }

    public function interviewList() {
        return $this->candidateList(
            [
                'recruit_candidate_map'=>[
                    '*'
                ],
                'candidate'=>[
                    'uuid',
                    'name',
                    'phone',
                    'email',
                    'resume',
                ],
                'position'=>[
                    'name'
                ],
                'interview'=>[
                    'name'
                ]
            ],
            [
                '>=',
                self::$aliasMap['recruit_candidate_map'] . '.status',
                CandidateConfig::StatusNotifyInterView,
            ]
        );
    }

    public function assessInterviewCandidateListFilter($filter) {
        if(empty($filter)) {
            return $this->assessCandidateList();
        }

        $map = [
            'name'=>[
                'like',
                self::$aliasMap['candidate'] . '.name'
            ],
            'interview_name'=>[
                'like',
                self::$aliasMap['interview'] . '.name',
            ],
            'phone'=>[
                'like',
                self::$aliasMap['candidate'] . '.phone',
            ],
            'email'=>[
                'like',
                self::$aliasMap['candidate'] . '.email',
            ],
            'position_uuid'=>[
                '=',
                self::$aliasMap['position'] . '.uuid',
            ],
            'status'=>[
                '=',
                self::$aliasMap['recruit_candidate_map'] . '.status'
            ]
        ];

        $condition = [
            'and',
            [
                'and',
                [
                    'in',
                    self::$aliasMap['recruit'] . '.created_uuid',
                    $this->getOrdinateUuidsWithoutSelf(RBACManager::Common),
                ],
                [
                    '>=',
                    self::$aliasMap['recruit_candidate_map'] . '.status',
                    CandidateConfig::StatusNotifyInterView,
                ]
            ]
        ];
        foreach ($filter as $index => $value) {
            $condition[] = [
                $map[$index][0],
                $map[$index][1],
                trim($value),
            ];
        }

        return $this->candidateList(
            [
                'recruit_candidate_map'=>[
                    '*'
                ],
                'candidate'=>[
                    'uuid',
                    'name',
                    'phone',
                    'email',
                    'resume',
                ],
                'position'=>[
                    'name'
                ],
                'interview'=>[
                    'name'
                ]
            ],
            $condition
        );
    }

    public function interviewCandidateListFilter($filter) {
        if(empty($filter)) {
            return $this->interviewList();
        }

        $map = [
            'name'=>[
                'like',
                self::$aliasMap['candidate'] . '.name'
            ],
            'interview_name'=>[
                'like',
                self::$aliasMap['interview'] . '.name',
            ],
            'phone'=>[
                'like',
                self::$aliasMap['candidate'] . '.phone',
            ],
            'email'=>[
                'like',
                self::$aliasMap['candidate'] . '.email',
            ],
            'position_uuid'=>[
                '=',
                self::$aliasMap['position'] . '.uuid',
            ],
            'status'=>[
                '=',
                self::$aliasMap['recruit_candidate_map'] . '.status'
            ]
        ];

        $condition = [
            'and',
            [
                '>=',
                self::$aliasMap['recruit_candidate_map'] . '.status',
                CandidateConfig::StatusNotifyInterView,
            ]
        ];
        foreach ($filter as $index => $value) {
            $condition[] = [
                $map[$index][0],
                $map[$index][1],
                trim($value),
            ];
        }

        return $this->candidateList(
            [
                'recruit_candidate_map'=>[
                    '*'
                ],
                'candidate'=>[
                    'uuid',
                    'name',
                    'phone',
                    'email',
                    'resume',
                ],
                'position'=>[
                    'name'
                ],
                'interview'=>[
                    'name'
                ]
            ],
            $condition
        );
    }

    public function myInterviewCandidateListFilter($filter) {
        if(empty($filter)) {
            return $this->myInterViewList();
        }

        $map = [
            'name'=>[
                'like',
                self::$aliasMap['candidate'] . '.name'
            ],
            'interview_name'=>[
                'like',
                self::$aliasMap['interview'] . '.name',
            ],
            'phone'=>[
                'like',
                self::$aliasMap['candidate'] . '.phone',
            ],
            'email'=>[
                'like',
                self::$aliasMap['candidate'] . '.email',
            ],
            'position_uuid'=>[
                '=',
                self::$aliasMap['position'] . '.uuid',
            ],
            'status'=>[
                '=',
                self::$aliasMap['recruit_candidate_map'] . '.status'
            ]
        ];

        $condition = [
            'and',
            [
                'and',
                [
                    'in',
                    self::$aliasMap['recruit'] . '.created_uuid',
                    $this->getOrdinateUuids(RBACManager::Common),
                ],
                [
                    '>=',
                    self::$aliasMap['recruit_candidate_map'] . '.status',
                    CandidateConfig::StatusNotifyInterView,
                ]
            ]
        ];
        foreach ($filter as $index => $value) {
            $condition[] = [
                $map[$index][0],
                $map[$index][1],
                trim($value),
            ];
        }

        return $this->candidateList(
            [
                'recruit_candidate_map'=>[
                    '*'
                ],
                'candidate'=>[
                    'uuid',
                    'name',
                    'phone',
                    'email',
                    'resume',
                ],
                'position'=>[
                    'name'
                ],
                'interview'=>[
                    'name'
                ]
            ],
            $condition
        );
    }

    public function recruitmentCandidateListFilter($filter) {
        $map = [
            'name'=>[
                'like',
                self::$aliasMap['candidate'] . '.name'
            ],
            'position'=>[
                'like',
                self::$aliasMap['candidate'] . '.position',
            ],
            'phone'=>[
                'like',
                self::$aliasMap['candidate'] . '.phone',
            ],
            'email'=>[
                'like',
                self::$aliasMap['candidate'] . '.email',
            ],
            'recruit_uuid'=>[
                '=',
                self::$aliasMap['recruit_candidate_map'] . '.recruit_uuid',
            ],
        ];

        $condition = [
            'and'
        ];
        foreach ($filter as $index => $value) {
            $condition[] = [
                $map[$index][0],
                $map[$index][1],
                trim($value),
            ];
        }

        return $this->candidateList(
            [
                'recruit_candidate_map'=>[
                    '*'
                ],
                'candidate'=>[
                    'id',
                    'uuid',
                    'name',
                    'phone',
                    'email',
                    'position',
                    'remarks',
                ],
            ],
            $condition
        );
    }

    /**
     * 我的面试列表
     */
    public function myInterViewList() {
        return $this->candidateList(
            [
                'recruit_candidate_map'=>[
                    '*'
                ],
                'candidate'=>[
                    'uuid',
                    'name',
                    'phone',
                    'email',
                    'resume',
                ],
                'position'=>[
                    'name'
                ],
                'interview'=>[
                    'name'
                ]
            ],
            [
                'and',
                [
                    'in',
                    self::$aliasMap['recruit'] . '.created_uuid',
                    $this->getOrdinateUuids(RBACManager::Common),
                ],
                [
                    '>=',
                    self::$aliasMap['recruit_candidate_map'] . '.status',
                    CandidateConfig::StatusNotifyInterView,
                ]
            ]
        );
    }

    /**
     * 审核候选人列表
     */
    public function assessCandidateList() {
        return $this->candidateList(
            [
                'recruit_candidate_map'=>[
                    '*'
                ],
                'candidate'=>[
                    'uuid',
                    'name',
                    'phone',
                    'email',
                    'resume',
                ],
                'position'=>[
                    'name'
                ],
                'interview'=>[
                    'name'
                ]
            ],
            [
                'and',
                [
                    'in',
                    self::$aliasMap['recruit'] . '.created_uuid',
                    $this->getOrdinateUuidsWithoutSelf(RBACManager::Common),
                ],
                [
                    '>=',
                    self::$aliasMap['recruit_candidate_map'] . '.status',
                    CandidateConfig::StatusNotifyInterView,
                ]
            ]
        );
    }

    public function candidateList($selects, $conditions = null,$fetchOne = false) {
        $selector = [];

        if (!empty($selects)) {
            foreach(self::$aliasMap as $key=>$alias) {
                if (isset($selects[$key])) {
                    foreach($selects[$key] as $select) {
                        if ($key === 'recruit_candidate_map') {
                            $select = trim($select);
                            $selector[] = $alias ."." . $select;
                        } else {
                            $select = trim($select);
                            $selector[] = $alias ."." . $select . " " . $key . "_" .$select;
                        }
                    }
                }
            }
        }

        $query = self::find()
            ->alias('t1')
            ->select($selector)
            ->leftJoin(self::HrCandidate . ' t2', 't1.candidate_uuid = t2.uuid')
            ->leftJoin(self::HrApplyRecruit . ' t3', 't1.recruit_uuid = t3.uuid')
            ->leftJoin(self::PositionTableName .' t4', 't3.position_uuid = t4.uuid')
            ->leftJoin(self::EmployeeBasicInformationTableName . ' t5', 't5.uuid = t3.created_uuid');
        if(!empty($conditions)) {
            $query->andWhere($conditions);
        }

        if ($fetchOne) {
            $record = $query->asArray()->one();
            return $record;
        }

        $pagination = new MyPagination([
            'totalCount'=>$query->count(),
            'pageSize' => self::PageSize,
        ]);
        $list = $query->orderBy([
            't1.id' => SORT_DESC,
        ])->offset($pagination->offset)->limit($pagination->limit)->asArray()->all();
        return [
            'pagination' => $pagination,
            'list'=> $list,
        ];
    }

    // 录用
    public function hire($id) {
        if(empty($id)) {
            return true;
        }

        $record = self::find()->andWhere(['id'=>$id])->one();
        if(empty($record)) {
            return true;
        }

        $transaction = Yii::$app->db->beginTransaction();
        try {
            $record->status = CandidateConfig::StatusHire;
            $record->update();
            $candidate = new Candidate();
            $candidate->updateRecord([
                'uuid'=>$record->candidate_uuid,
                'location'=>CandidateConfig::LocateHired,
                'assess_uuid'=>Yii::$app->user->getIdentity()->getId()
            ]);

            $candidate = $this->getCandidate($record->recruit_uuid, $record->candidate_uuid);
            $employee = new EmployeeBasicInformation();
            $employee->insertRecord([
                'uuid'=>$candidate['uuid'],
                'name'=>$candidate['name'],
                'phone_number'=>$candidate['phone'],
                'email'=>$candidate['email'],
                'created_uuid'=>$candidate['created_uuid'],
                'remarks'=>$candidate['remarks'],
                'path'=>$candidate['resume'],
                'status'=>EmployeeAccount::STATUS_WAIT_ENTRY,
                'position_uuid'=>$candidate['position_uuid']
            ]);
        } catch (Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }

        $transaction->commit();
        return true;
    }

    // 不录用
    public function disHire($id) {
        if(empty($id)) {
            return true;
        }

        $record = self::find()->andWhere(['id'=>$id])->one();
        if(empty($record)) {
            return true;
        }
        $record->status = CandidateConfig::StatusDisHire;
        $record->assess_uuid = Yii::$app->user->getIdentity()->getId();
        $record->update();
        return true;
    }

    // 放入人才库
    public function pushToTalent($id) {
        if(empty($id)) {
            return true;
        }

        $record = self::find()->andWhere(['id'=>$id])->one();
        if(empty($record)) {
            return true;
        }

        $transaction = Yii::$app->db->beginTransaction();
        try {
            $record->status = CandidateConfig::StatusDisHire;
            $record->update();
            $candidate = new Candidate();
            $candidate->updateRecord([
                'uuid'=>$record->candidate_uuid,
                'location'=>CandidateConfig::LocateTalent,
                'assess_uuid'=> Yii::$app->user->getIdentity()->getId(),
            ]);
        } catch (Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }

        $transaction->commit();
        return true;
    }

    // 放入黑名单
    public function pushToBlackList($id) {
        if(empty($id)) {
            return true;
        }

        $record = self::find()->andWhere(['id'=>$id])->one();
        if(empty($record)) {
            return true;
        }

        $transaction = Yii::$app->db->beginTransaction();
        try {
            $record->status = CandidateConfig::StatusDisHire;
            $record->update();
            $candidate = new Candidate();
            $candidate->updateRecord([
                'uuid'=>$record->candidate_uuid,
                'location'=>CandidateConfig::LocateBlackList,
                'assess_uuid'=> Yii::$app->user->getIdentity()->getId(),
            ]);
        } catch (Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }

        $transaction->commit();
        return true;
    }

    public function interViewCancel($id) {
        if(empty($id)) {
            return true;
        }

        self::deleteAll(['id'=>$id]);
        return true;
    }
}