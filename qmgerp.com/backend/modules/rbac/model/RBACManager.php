<?php

namespace backend\modules\rbac\model;
use backend\modules\hr\models\Department;
use backend\modules\hr\models\EmployeeBasicInformation;
use backend\modules\hr\models\EmployeePositionMap;
use backend\modules\hr\models\Position;
use yii\helpers\Json;
use yii\rbac\DbManager;
use yii\db\Query;
use yii\rbac\Item;
use Yii;

class RBACManager extends DbManager
{
    const CustomerModule = 'customer';
    const ProjectModule = 'project';
    const HRModule = 'humanResource';
    const Financial = 'Financial';
    const Media = 'Media';
    const Administer = 'Administer';
    const Common = 'Common';

    // 检查是否可以访问这个权限
    public function canAccess($permissionName, $params=[]) {
        $userId = Yii::$app->user->getIdentity()->getId();
        return parent::checkAccess($userId, $permissionName, $params);
    }

    public function getAllChildren($roleName)
    {
        $childrenList = $this->getChildrenList();
        $result = [];
        $this->getChildrenRecursive($roleName, $childrenList, $result);
        return $result;
    }

    public function getChildrenRoles($name)
    {
        $roles = [];
        $items = $this->getChildren($name);
        foreach($items as $item) {
            if($item->type == Item::TYPE_ROLE) {
                $roles[] = $item;
            }
        }
        return $roles;
    }

    public function getParent($roleName) {
        $query = new Query;
        $parent = $query->select(['parent'])
            ->from($this->itemChildTable)
            ->where(['child' => $roleName])
            ->column($this->db);
        if(empty($parent)) {
            return false;
        }
        return $parent;
    }

    public function removeItem($itemName)
    {
        $item = $this->getItem($itemName);
        return parent::removeItem($item); // TODO: Change the autogenerated stub
    }

    // $module erp系统的功能模块
    // 这个人的部门信息
    public function getOrdinateFromUserId($useId, $module, $department_uuids) {
        // 获取当前用户的角色
        $roles = $this->getRolesByUser($useId);
        $map = [
            self::CustomerModule => [
                'SalesManager',
                'SalesDirector',
                'ceo',
            ],
            self::ProjectModule => [
                'ProjectManager',
                'ProjectDirector',
                'ceo',
            ],
            self::HRModule => [
                'HumanResourceManager',
                'HumanResourceDirector',
                'ceo',
            ],
            self::Financial => [
                'FinancialManager',
                'FinancialDirector',
                'ceo',
            ],
            self::Media => [
                'MediaManager',
                'MediaDirector',
                'ceo',
            ],
            self::Administer => [
                'AdministerManager',
                'AdministerDirector',
                'ceo',
            ],
            self::Common => [
                'SalesManager',
                'SalesDirector',
                'ProjectManager',
                'ProjectDirector',
                'FinancialManager',
                'FinancialDirector',
                'MediaManager',
                'MediaDirector',
                'AdministerManager',
                'AdministerDirector',
                'AdministerManager',
                'AdministerDirector',
                RoleManager::BlackAccountDirector,
                RoleManager::AdministerManager,
                RoleManager::VicePresident,
                'ceo',
            ],
        ];

        $_return  = [];
        foreach($roles as $role) {
            if(!in_array($role->name, $map[$module]) || empty($ordinateRoles = $this->getAllChildren($role->name))) {
                continue;
            }
            // 获取当前角色下的所有子角色的信息
            // 根据子角色获取所有的对应的员工信息
            // 得到员工信息，再根据当前的人员所在部门信息进行过滤

            foreach($ordinateRoles as $ordinateRole=>$key) {
                $userIds = $this->getUserIdsByRole($ordinateRole);
                if(empty($userIds)) {
                    continue;
                }
                foreach($userIds as $useId) {
                    // 获取子元素的部门信息
                    $departments = Department::find()
                        ->alias('t1')
                        ->leftJoin(Position::tableName() . ' t2', 't1.uuid = t2.de_uuid')
                        ->leftJoin(EmployeePositionMap::tableName() . ' t3','t3.position_uuid=t2.uuid')
                        ->leftJoin(EmployeeBasicInformation::tableName() . ' t4','t4.uuid = t3.em_uuid')
                        ->andWhere(['t4.uuid'=>$useId])
                        ->asArray()->all();
                    foreach($departments as $department) {
                        // 如果当前部门uuid是和下属的部门uuid相同，表示这个人是你的下属
                        if(in_array($department['uuid'], $department_uuids)) {
                            $_return[] = $useId;
                            break;
                        }
                        // 如果这下属部门的上级部门里面有这个uuid，表示这个人是你的下属
                        $department['parent_departments'] = Json::decode($department['parent_departments']);
                        if(empty($department['parent_departments'])) {
                            continue;
                        }
                        $intersect = array_intersect($department_uuids, $department['parent_departments']);
                        if(!empty($intersect)) {
                            $_return[] = $useId;
                            break;
                        }
                    }
                }
            }
        }
        return $_return;
    }

    public function getItem($name)
    {
        return parent::getItem($name); // TODO: Change the autogenerated stub
    }

    public function getItems($type)
    {
        return parent::getItems($type); // TODO: Change the autogenerated stub
    }

    public function isAuthor($employee_uuid, $created_uuid) {
        return $employee_uuid === $created_uuid;
    }

    public function getUserIdsByRoles($roleNames)
    {
        if(empty($roleNames)) {
            return null;
        }

        $uuids = [];

        foreach($roleNames as $roleName) {
            $uuids = array_merge($uuids, $this->getUserIdsByRole($roleName));
        }
        return array_unique($uuids);
    }

    // 判断是不是某个角色的上级角色
    public function isPointedRolesLead($roleName) {
        $roles = $this->getRolesByUser(Yii::$app->getUser()->getIdentity()->getId());
        foreach ($roles as $role) {
            $ordinateRoles = array_keys($this->getAllChildren($role->name));
            if (in_array($roleName, $ordinateRoles)) {
                return true;
            }
        }

        return false;
    }
}