<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2016/10/27 0027
 * Time: 下午 3:24
 */

namespace backend\modules\crm\models\project\record;


use backend\models\interfaces\DeleteRecordOperator;
use backend\models\UUID;
use backend\models\MyPagination;
use backend\modules\crm\models\project\model\ProjectForm;
use backend\modules\rbac\model\RBACManager;
use Yii;
use yii\db\Exception;

class ProjectApplyStamp extends ProjectBaseRecord implements DeleteRecordOperator
{
    const WithOutStamp = 1;
    const PartCheckedStamp = 2;
    const CheckedStamp = 3;
    public static $status = [
        self::WithOutStamp => '未开票',
        self::PartCheckedStamp => '部分开票',
        self::CheckedStamp => '已开票',
    ];

    public static $aliasMap = [
        'project_apply_stamp'=>'t1',
        'project'=>'t2',
        'created'=>'t3',
        'customer_project_map'=>'t4',
        'customer_advance'=>'t5',
        'project_member_map'=>'t6',
    ];

    public static function tableName()
    {
        return self::CRMProjectApplyStamp;
    }

    // 发票作废
    public function disableStamp($uuid, $money) {
        if(empty($uuid)) {
            return true;
        }

        $record = self::find()->andWhere(['uuid'=>$uuid])->one();
        if(empty($record)) {
            return true;
        }

        $transaction = Yii::$app->db->beginTransaction();
        try {
            $record->checked_stamp_money -= $money;
            // 根据金额将开票状态转变一下
            if($record->checked_stamp_money == 0) {
                $record->status = self::WithOutStamp;
            } else {
                $record->status = self::PartCheckedStamp;
            }
            $record->update();
            $project = new Project();
            $project->stampDisable($record->project_uuid, $money);
        } catch (Exception $e) {
            $transaction->rollBack();
            throw  $e;
            return false;
        }

        $transaction->commit();
        return true;
    }

    public function formDataPreHandler(&$formData, $record)
    {
        if(empty($record)) {
            $formData['created_time'] = time();
            $formData['uuid'] = UUID::getUUID();
            $formData['status'] = self::WithOutStamp;
            $formData['enable'] = self::Enable;
        }
        parent::formDataPreHandler($formData, $record); // TODO: Change the autogenerated stub
    }

    public function insertRecord($formData)
    {
        if(empty($formData)) {
            return true;
        }

        if(!$this->updatePreHandler($formData)) {
            return true;
        }
        
        return $this->insert();
    }

    public function billing($formData) {
        if(empty($formData) || !isset($formData['uuid']) || empty($formData['uuid'])) {
            return true;
        }

        $record = self::find()->andWhere(['uuid'=>$formData['uuid']])->one();
        if(empty($record)) {
            return true;
        }

        $record->checked_stamp_money += $formData['checked_stamp_money'];
        if($record->checked_stamp_money >= $record->money) {
            $record->status = self::CheckedStamp;
        } else {
            $record->status = self::PartCheckedStamp;
        }

        $transaction = Yii::$app->db->beginTransaction();
        try {
            // 将对应的项目的开票金额同步过去
            $project = new Project();
            $project->billing([
                'uuid'=>$record->project_uuid,
                'checked_stamp_money'=>$formData['checked_stamp_money'],
            ]);
            $record->update();
        } catch (Exception $e) {
            $transaction->rollBack();
            throw  $e;
            return false;
        }

        $transaction->commit();
        return true;
    }
    
    public function updateRecord($formData)
    {
        if(empty($formData) || !isset($formData['uuid']) || empty($formData['uuid'])) {
            return true;
        }
        
        $record = self::find()->andWhere(['uuid'=>$formData['uuid']])->one();
        if(empty($record) || !$this->updatePreHandler($formData, $record)) {
            return true;
        }

        return $record->update();
    }

    public function deleteRecord($uuid)
    {
        // TODO: Implement deleteRecord() method.
    }

    public function myStampList() {
        $condition = [
            'and',
            [
                '=',
                self::$aliasMap['project_apply_stamp'] . '.enable',
                self::Enable,
            ],
        ];
        if(Yii::$app->getUser()->getIdentity()->getUserName() != 'admin') {
            $condition[] = [
                'or',
                [
                    'in',
                    self::$aliasMap['project'] . '.project_manager_uuid',
                    $this->getOrdinateUuids(RBACManager::ProjectModule),
                ],
                [
                    'in',
                    self::$aliasMap['customer_advance'] . '.sales_uuid',
                    $this->getOrdinateUuids(RBACManager::CustomerModule),
                ],
                [
                    '=',
                    self::$aliasMap['project_member_map'] . '.member_uuid',
                    Yii::$app->getUser()->getIdentity()->getId(),
                ]
            ];
        }

        return $this->applyStampList(
            [
                'project_apply_stamp'=>[
                    '*',
                ],
                'project'=>[
                    'code',
                    'name',
                ],
                'created'=>[
                    'name'
                ]
            ],
            $condition
        );
    }

    public function getListByProjectUuid($project_uuid) {
        return $this->applyStampList(
            [
                'project_apply_stamp'=>[
                    '*',
                ],
                'project'=>[
                    'code',
                    'name',
                ],
                'created'=>[
                    'name'
                ]
            ],
            [
               'and',
                [
                    '=',
                    self::$aliasMap['project_apply_stamp'] . '.enable',
                    self::Enable,
                ],
                [
                    '=',
                    self::$aliasMap['project'] . '.uuid',
                    $project_uuid,
                ]
            ]
        );
    }
    
    public function allList() {
        return $this->applyStampList(
            [
                'project_apply_stamp'=>[
                    '*',
                ],
                'project'=>[
                    'code',
                    'name',
                ],
                'created'=>[
                    'name'
                ]
            ],
            [
                '=',
                self::$aliasMap['project_apply_stamp'] . '.enable',
                self::Enable,
            ]
        );
    }

    public function applyStampList($selects, $conditions = null, $enablePage = true) {
        $selector = [];

        if (!empty($selects)) {
            foreach(self::$aliasMap as $key=>$alias) {
                if (isset($selects[$key])) {
                    foreach($selects[$key] as $select) {
                        $select = trim($select);
                        if ($key === 'project_apply_stamp') {
                            $selector[] = $alias ."." . $select;
                        } else {
                            $selector[] = $alias ."." . $select . " " . $key . "_" .$select;
                        }
                    }
                }
            }
        }

        $query = self::find()
            ->alias('t1')
            ->select($selector)
            ->leftJoin(self::CRMProject . ' t2', 't2.uuid = t1.project_uuid')
            ->leftJoin(self::EmployeeBasicInformationTableName . ' t3', 't3.uuid = t1.created_uuid')
            ->leftJoin(self::CRMCustomerProjectMap . ' t4', 't4.project_uuid = t2.uuid')
            ->leftJoin(self::CRMCustomerAdvance . ' t5', 't4.customer_uuid = t5.customer_uuid')
            ->leftJoin(self::CRMProjectMemberMap . ' t6', 't6.project_uuid = t2.uuid');

        if(!empty($conditions)) {
            $query->andWhere($conditions);
        }

        if(!$enablePage) {
            return $query->asArray()->one();
        }

        $pagination = new MyPagination([
            'totalCount'=>$query->count(),
            'pageSize' => self::PageSize,
        ]);
        $list = $query->orderBy('t1.id DESC')->offset($pagination->offset)->limit($pagination->limit)->asArray()->all();
        $data = [
            'pagination' => $pagination,
            'list'=> $list,
        ];
        return $data;
    }

    public function listFilter($filter) {
        if(empty($filter)) {
            return $this->myStampList();
        }

        if(isset($filter['project_code']) && !empty($filter['project_code'])) {
            preg_match('/([a-zA-Z]*)(\d+)/',$filter['project_code'],$match);
            if(isset($match[1]) && $match[1] === ProjectForm::codePrefix) {
                $filter['project_code'] = $match[2];
            }
        }

        $this->handlerFormDataTime($filter, 'min_created_time');
        $this->handlerFormDataTime($filter, 'max_created_time');

        $map = [
            'min_money'=>[
                '>=',
                'project_apply_stamp',
                'money',
            ],
            'max_money'=>[
                '<=',
                'project_apply_stamp',
                'money',
            ],
            'min_checked_stamp_money'=>[
                '>=',
                'project_apply_stamp',
                'checked_stamp_money',
            ],
            'max_checked_stamp_money'=>[
                '<=',
                'project_apply_stamp',
                'checked_stamp_money',
            ],
            'min_created_time'=>[
                '>=',
                'project_apply_stamp',
                'created_time',
            ],
            'max_created_time'=>[
                '<=',
                'project_apply_stamp',
                'created_time',
            ],
            'project_name'=>[
                'like',
                'project',
                'name',
            ],
            'project_code'=>[
                'like',
                'project',
                'code',
            ],
            'created_name'=>[
                'like',
                'created',
                'name',
            ],
            'id'=>[
                '=',
                'project_apply_stamp',
                'id',
            ],
            'status'=>[
                '=',
                'project_apply_stamp',
                'status',
            ],
        ];

        $condition = [
            'and',
            [
                '=',
                self::$aliasMap['project_apply_stamp'] . '.enable',
                self::Enable,
            ]
        ];
        if(Yii::$app->getUser()->getIdentity()->getUserName() != 'admin') {
            $condition[] = [
                'or',
                [
                    'in',
                    self::$aliasMap['project'] . '.project_manager_uuid',
                    $this->getOrdinateUuids(RBACManager::ProjectModule),
                ],
                [
                    'in',
                    self::$aliasMap['customer_advance'] . '.sales_uuid',
                    $this->getOrdinateUuids(RBACManager::CustomerModule),
                ],
                [
                    '=',
                    self::$aliasMap['project_member_map'] . '.member_uuid',
                    Yii::$app->getUser()->getIdentity()->getId(),
                ]
            ];
        }

        foreach ($filter as $index => $item) {
            $condition[] = [
                $map[$index][0],
                self::$aliasMap[$map[$index][1]] . '.' . $map[$index][2],
                trim($item),
            ];
        }

        return $this->applyStampList(
            [
                'project_apply_stamp'=>[
                    '*',
                ],
                'project'=>[
                    'code',
                    'name',
                ],
                'created'=>[
                    'name'
                ]
            ],
            $condition
        );
    }
}