<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2016/9/1 0001
 * Time: 上午 10:43
 */

namespace backend\modules\crm\models\project\record;

use backend\models\interfaces\Map;
use backend\models\interfaces\RecordOperator;
use Yii;

class ProjectMemberMap extends ProjectBaseRecord implements RecordOperator,Map
{
    static public function tableName()
    {
        return self::CRMProjectMemberMap;
    }

    public function insertSingleRecord($formData)
    {
        if(empty($formData)) {
            return false;
        }

        if(!$this->updatePreHandler($formData)) {
            return false;
        }

        return $this->insert();
    }

    public function formDataPreHandler(&$formData, $record)
    {
        parent::formDataPreHandler($formData, $record); // TODO: Change the autogenerated stub
    }

    public function recordPreHandler(&$formData, $record = null)
    {
        if(empty($record)) {
            $this->setOldAttribute('project_uuid', null);
            $this->setOldAttribute('member_uuid', null);
            $this->setOldAttribute('created_uuid', null);
        }
    }

    public function insertRecord($formData)
    {
        if (empty($formData) || !isset($formData['project_uuid']) || empty($formData['project_uuid'])) {
            return true;
        }
        $member_uuids = $this->handlerUuidString($formData['member_uuid']);
        $transaction = Yii::$app->db->beginTransaction();
        try {
            foreach ($member_uuids as $index => $uuid) {
                $data = [
                    'project_uuid'=>$formData['project_uuid'],
                    'member_uuid'=>$uuid,
                ];
                    $this->insertSingleRecord($data);
            }
        } catch(Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }
        $transaction->commit();
        return true;
    }

    public function updateSingleRecord($formData)
    {
        // TODO: Implement updateSingleRecord() method.
    }

    public function updateRecord($formData)
    {
        if(empty($formData) || !isset($formData['project_uuid']) || empty($formData['project_uuid'])) {
            return true;
        }
        $records = self::find()->andWhere(['project_uuid'=>$formData['project_uuid']])->asArray()->all();
        $oldMemberUuids = $this->getAppointedValue($records,'member_uuid');
        $newMemberUuids = $this->getDistinctValueAsArray(explode(",",$formData['member_uuid']));
        // 找出修改前后数据差集
        $shouldDeletes = array_diff($oldMemberUuids,$newMemberUuids);
        $shouldInserts = array_diff($newMemberUuids,$oldMemberUuids);
        $transaction = Yii::$app->db->beginTransaction();
        $data = $formData;
        try{
            //删除在前台页面删除的数据
            foreach($shouldDeletes as $shouldDelete) {
                $this->deleteAll([
                    'project_uuid'=>$formData['project_uuid'],
                    'member_uuid'=>$shouldDelete,
                ]);
            }
            //插入在前台页面新增的数据
            foreach($shouldInserts as $shouldInsert) {
                $data['member_uuid'] = $shouldInsert;
                if($this->updateRecordBuilder($data)) {
                    $this->setOldAttribute('member_uuid',null);
                    $this->setOldAttribute('project_uuid',null);
                    $this->insert();
                }
            }
        }catch (Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }
        $transaction->commit();
        return true;
    }

    public function handlerUuidString($uuidString) {
        $uuids = array_unique(explode(',',$uuidString));
        foreach($uuids as $index => $uuid) {
            if (empty($uuid)) {
                unset($uuids[$index]);
            }
        }
        return $uuids;
    }

}