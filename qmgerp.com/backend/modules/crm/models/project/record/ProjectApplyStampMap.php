<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2016/10/28 0028
 * Time: 下午 12:24
 */

namespace backend\modules\crm\models\project\record;


use backend\models\interfaces\Map;
use backend\models\UUID;
use backend\modules\fin\stamp\models\ExportStamp;
use Yii;
use yii\db\Exception;

class ProjectApplyStampMap extends ProjectBaseRecord implements Map
{
    public static function tableName()
    {
        return self::CRMProjectApplyStampMap;
    }

    public function formDataPreHandler(&$formData, $record)
    {
        if(empty($record)) {
            $formData['uuid'] = UUID::getUUID();
            $formData['checked_uuid'] = Yii::$app->user->getIdentity()->getId();
            $formData['checked_time'] = time();
        }
        parent::formDataPreHandler($formData, $record); // TODO: Change the autogenerated stub
    }

    public function insertSingleRecord($formData)
    {
        if(empty($formData)) {
            return true;
        }

        if(!$this->updatePreHandler($formData)) {
            return true;
        }

        $transaction = Yii::$app->db->beginTransaction();
        try {
            // 让项目付款申请的开票金额和状态调整
            $projectApplyStamp = new ProjectApplyStamp();
            $projectApplyStamp->billing([
                'uuid'=>$formData['project_apply_stamp_uuid'],
                'checked_stamp_money'=>$formData['money'],
            ]);
            // 将发票的已匹配金额同步过去
            $exportStamp = new ExportStamp();
            $exportStamp->billing([
                'uuid'=>$formData['stamp_uuid'],
                'checked_money' => $formData['money'],
            ]);
            $this->insert();
        } catch (Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }

        $transaction->commit();
        return true;
    }

    /**
     * 销项发票作废
     */
    public function stampDisable($uuid) {
        if(empty($uuid)) {
            return true;
        }

        $records = self::find()->andWhere(['stamp_uuid'=>$uuid])->all();
        if(empty($records)) {
            return true;
        }

        $transaction = Yii::$app->db->beginTransaction();
        try {
            // 这里面存放了project_apply_stamp的uuid 和被这种发票匹配的金额和
            $map = [];
            foreach ($records as $record) {
                $map[$record->project_apply_stamp_uuid] =
                    (isset($map[$record->project_apply_stamp_uuid])
                        ?$map[$record->project_apply_stamp_uuid]:0) + $record->money;
                $record->delete();
            }
            // 将projectApplyStamp表里面相对应的匹配金额减去
            $projectApplyStamp = new ProjectApplyStamp();
            foreach ($map as $uuid => $money) {
                $projectApplyStamp->disableStamp($uuid, $money);
            }
        } catch (Exception $e) {
            $transaction->rollBack();
            throw  $e;
            return false;
        }

        $transaction->commit();
        return true;
    }
    
    public function updateSingleRecord($formData)
    {
        // TODO: Implement updateSingleRecord() method.
    }

    public function getBillingRecordListByApplyStampUuid($uuid) {
        if(empty($uuid)) {
            return null;
        }

        return self::find()
            ->alias('t1')
            ->select([
                't1.*',
                't2.name checked_name',
                't3.money stamp_money',
                't3.series_number stamp_series_number',
                't3.provider stamp_provider',
                't3.receiver stamp_receiver',
                't3.provider stamp_provider',
                't3.uuid stamp_uuid',
            ])
            ->leftJoin(self::EmployeeBasicInformationTableName . ' t2', 't1.checked_uuid = t2.uuid')
            ->leftJoin(self::FINStamp . ' t3', 't3.uuid = t1.stamp_uuid')
            ->andWhere(['t1.project_apply_stamp_uuid'=>$uuid])
            ->asArray()->all();
    }
}