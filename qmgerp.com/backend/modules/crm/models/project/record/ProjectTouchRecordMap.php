<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2016/7/28 0028
 * Time: 下午 2:21
 */

namespace backend\modules\crm\models\project\record;


use backend\models\interfaces\Map;
use backend\models\interfaces\RecordOperator;
use Yii;
use backend\modules\rbac\model\RBACManager;
use backend\models\MyPagination;

class ProjectTouchRecordMap extends ProjectBaseRecord implements Map,RecordOperator
{
    static public function tableName()
    {
        return self::CRMProjectTouchRecordMap;
    }

    public function insertRecord($formData)
    {
        // TODO: Implement insertRecord() method.
    }

    public function formDataPreHandler(&$formData, $record)
    {
        parent::formDataPreHandler($formData, $record); // TODO: Change the autogenerated stub
    }

    public function insertSingleRecord($formData)
    {
        if(empty($formData)) {
            return true;
        }

        if(!$this->updatePreHandler($formData)) {
            return true;
        }

        return $this->insert();
    }

    public function updateRecord($formData)
    {
        // TODO: Implement updateRecord() method.
    }

    public function updateSingleRecord($formData)
    {
        // TODO: Implement updateSingleRecord() method.
    }

    public function allTouchRecord() {
        // 获取所有的projects
        $projectList = (new Project())->myProjectList(false);

        return $this->touchRecordList([
            'in',
            't3.uuid',
            $this->getAppointedValue($projectList, 'uuid'),
        ]);
    }

    public function listFilter($filter) {
        if(empty($filter)) {
            return $this->allTouchRecord();
        }

        $this->handlerFormDataTime($filter,'min_time');
        $this->handlerFormDataTime($filter,'max_time');

        $map = [
            'project_name'=>[
                'like',
                't3.name',
            ],
            'follow_name'=>[
                'like',
                't4.name'
            ],
            'min_time'=>[
                '>=',
                't2.time'
            ],
            'max_time'=>[
                '<=',
                't2.time'
            ],
        ];

        $condition = [
            'and',
            [
                'in',
                't3.uuid',
                $this->getAppointedValue((new Project())->myProjectList(false), 'uuid'),
            ]
        ];

        foreach ($filter as $key => $value) {
            $condition[] = [
                $map[$key][0],
                $map[$key][1],
                $value
            ];
        }

        return $this->touchRecordList($condition);
    }

    public function touchRecordList($condition) {
        $query = self::find()->alias('t1')->select([
            't2.*',
            't3.name project_name',
            't4.name follow_name',
            't5.name contact_name',
        ])->leftJoin(self::CRMTouchRecord . ' t2', 't1.touch_record_uuid = t2.uuid')
            ->leftJoin(self::CRMProject . ' t3', 't1.project_uuid = t3.uuid')
            ->leftJoin(self::EmployeeBasicInformationTableName . ' t4', 't2.follow_uuid = t4.uuid')
            ->leftJoin(self::CRMContact . ' t5', 't5.uuid = t2.contact_uuid')
            ->andWhere($condition);
        $pagination = new MyPagination([
            'totalCount'=>$query->count(),
            'pageSize' => self::PageSize,
        ]);
        $publicCustomerList = $query->orderBy([
            't2.time'=>SORT_DESC
        ])->offset($pagination->offset)->limit($pagination->limit)->asArray()->all();
        return [
            'pagination' => $pagination,
            'touchRecordList'=> $publicCustomerList,
        ];
    }
}