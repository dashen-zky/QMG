<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2016/9/26 0026
 * Time: 下午 3:53
 */

namespace backend\modules\crm\models\project\record;


use backend\models\interfaces\Map;
use backend\models\interfaces\RecordOperator;
use backend\models\UUID;
use backend\modules\crm\Module;
use backend\modules\fin\payment\models\Payment;
use backend\modules\fin\payment\models\PaymentConfig;
use backend\modules\rbac\model\RBACManager;
use Yii;
use yii\db\Exception;
use backend\modules\crm\models\project\model\ProjectForm;

class ProjectPaymentMap extends ProjectBaseRecord implements RecordOperator, Map
{
    public static function tableName()
    {
        return self::CRMProjectPaymentMap;
    }

    public function formDataPreHandler(&$formData, $record)
    {
        if(!isset($formData['uuid']) || empty($formData['uuid'])) {
            $formData['uuid'] = UUID::getUUID();
        }

        if(!isset($formData['type']) || empty($formData['type'])) {
            $formData['type'] = PaymentConfig::PaymentForProjectExecute;
        }

        if(!isset($formData['payment_uuid']) || empty($formData['payment_uuid'])) {
            $formData['payment_uuid'] = $formData['uuid'];
        }
        parent::formDataPreHandler($formData, $record); // TODO: Change the autogenerated stub
    }

    public function insertRecord($formData)
    {
        if(empty($formData)) {
            return false;
        }

        if(!$this->updatePreHandler($formData)) {
            return false;
        }

        $transaction = Yii::$app->db->beginTransaction();
        try {
            $payment = new Payment();
            if(!$payment->insertRecord($formData)) {
                $transaction->rollBack();
                return false;
            }
            $this->insert();
        } catch(Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }
        $transaction->commit();
        return true;
    }

    public function updateRecord($formData)
    {
        if(empty($formData)) {
            return true;
        }
        $condition = isset($formData['payment_uuid']) ? ['payment_uuid'=>$formData['payment_uuid']] : ['payment_uuid'=>$formData['uuid']];
        $record = self::find()->andWhere($condition)->one();
        if(empty($record) || !$this->updatePreHandler($formData, $record)) {
            return true;
        }
        $transaction = Yii::$app->db->beginTransaction();
        try {
            $record->update();
            $payment = new Payment();
            $payment->updateRecord($formData);
        } catch(Exception $e) {
            $transaction->rollBack();
            return false;
        }
        $transaction->commit();
        return true;
    }

    public function myPaymentList($condition = null) {
        $payment = new Payment();
        $uuids = $this->getOrdinateUuids(RBACManager::ProjectModule);
        $condition = [
            $condition,
            [
                'in',
                't1.created_uuid',
                $uuids
            ],
            [
                '=',
                $payment->aliasMap['payment'] . '.type',
                PaymentConfig::PaymentForProjectExecute,
            ]
        ];
        $list = $payment->paymentList(
            [
                'payment'=>[
                    '*'
                ],
                'project'=>[
                    'name',
                    'code',
                ]
            ],
            $condition
        );
        return $list;
    }

    public function listFilter($filter) {
        $is_apply_check_stamp = 
            isset($filter['is_apply_check_stamp']) && $filter['is_apply_check_stamp']?true:false;
        unset($filter['is_apply_check_stamp']);
        $payment = new Payment();
        if(empty($filter)) {
            return $this->myPaymentList($is_apply_check_stamp?[
                'and',
                [
                    '=',
                    $payment->aliasMap['payment'] . '.with_stamp',
                    PaymentConfig::WithStamp,
                ],
                [
                    'in',
                    $payment->aliasMap['payment'] . '.status',
                    [
                        PaymentConfig::StatusWithoutPaied,
                        PaymentConfig::StatusPartPaied,
                        PaymentConfig::StatusSuccess,
                    ],
                ]
            ]:null);
        }

        if(isset($filter['code']) && !empty($filter['code'])) {
            preg_match('/([a-zA-Z]*)(\d+)/',$filter['code'],$match);
            if($match[1] === PaymentConfig::CodePrefix) {
                $filter['code'] = $match[2];
            }
        }

        if(isset($filter['project_code']) && !empty($filter['project_code'])) {
            preg_match('/([a-zA-Z]*)(\d+)/',$filter['project_code'],$match);
            if($match[1] === ProjectForm::codePrefix) {
                $filter['project_code'] = $match[2];
            }
        }
        $this->handlerFormDataTime($filter, 'min_expect_time');
        $this->handlerFormDataTime($filter, 'max_expect_time');
        $this->handlerFormDataTime($filter, 'max_created_time');
        $this->handlerFormDataTime($filter, 'min_created_time');

        $map = [
            'code'=>[
                'like',
                'payment',
                'code',
            ],
            'project_name'=>[
                'like',
                'project',
                'name',
            ],
            'project_code'=>[
                'like',
                'project',
                'code',
            ],
            'stamp_status'=>[
                '=',
                'payment',
                'stamp_status',
            ],
            'min_checked_stamp_money'=>[
                '>=',
                'payment',
                'checked_stamp_money',
            ],
            'max_checked_stamp_money'=>[
                '<=',
                'payment',
                'checked_stamp_money',
            ],
            'purpose'=>[
                '=',
                'payment',
                'purpose',
            ],
            'with_stamp'=>[
                '=',
                'payment',
                'with_stamp',
            ],
            'status'=>[
                '=',
                'payment',
                'status',
            ],
            'receiver_account_type'=>[
                '=',
                'payment',
                'receiver_account_type',
            ],
            'max_created_time'=>[
                '<=',
                'payment',
                'created_time',
            ],
            'min_created_time'=>[
                '>=',
                'payment',
                'created_time',
            ],
            'max_expect_time'=>[
                '<=',
                'payment',
                'expect_time',
            ],
            'min_expect_time'=>[
                '>=',
                'payment',
                'expect_time',
            ],
            'min_money'=>[
                '>=',
                'payment',
                'actual_money',
            ],
            'max_money'=>[
                '<=',
                'payment',
                'actual_money',
            ],
            ''
        ];

        $condition = [
            [
                'in',
                $payment->aliasMap['payment'] . '.created_uuid',
                $this->getOrdinateUuids(RBACManager::ProjectModule),
            ],
            [
                '=',
                $payment->aliasMap['payment'] . '.type',
                PaymentConfig::PaymentForProjectExecute,
            ]
        ];
        if($is_apply_check_stamp) {
            $condition[] = [
                'and',
                [
                    '=',
                    $payment->aliasMap['payment'] . '.with_stamp',
                    PaymentConfig::WithStamp,
                ],
                [
                    'in',
                    $payment->aliasMap['payment'] . '.status',
                    [
                        PaymentConfig::StatusWithoutPaied,
                        PaymentConfig::StatusPartPaied,
                        PaymentConfig::StatusSuccess,
                    ],
                ]
            ];
        }

        foreach($filter as $key=>$value) {
            $condition[] = [
                $map[$key][0],
                $payment->aliasMap[$map[$key][1]] . '.' . $map[$key][2],
                trim($value, ' ')
            ];
        }

        $list = $payment->paymentList(
            [
                'payment'=>[
                    '*'
                ],
                'project'=>[
                    'name',
                    'code',
                ]
            ],
            $condition
        );
        return $list;
    }

    // 这个uuid是payment_uuid
    public function getRecordByUuid($uuid) {
        if(empty($uuid)) {
            return false;
        }

        $payment = new Payment();
        return $payment->paymentList(
            [
                'payment'=>[
                    '*'
                ],
                'paied'=>[
                    'name'
                ],
                'project'=>[
                    'uuid',
                    'name',
                ],
                'created'=>[
                    'name',
                ],
                'first_assess'=>[
                    'name',
                ],
                'second_assess'=>[
                    'name',
                ],
                'third_assess'=>[
                    'name',
                ],
                'fourth_assess'=>[
                    'name',
                ],
                'checked_stamp'=>[
                    'name',
                ],
                'stamp'=>[
                    'series_number',
                ],
            ],
            [
                [
                    '=',
                    $payment->aliasMap['payment'] . '.uuid',
                    $uuid
                ],
                [
                    '=',
                    $payment->aliasMap['payment'] . '.type',
                    PaymentConfig::PaymentForProjectExecute,
                ]
            ],
            true
        );
    }

    public function insertSingleRecord($formData)
    {
        if(empty($formData)) {
            return false;
        }

        if(!$this->updatePreHandler($formData)) {
            return false;
        }

        return $this->insert();
    }

    public function updateSingleRecord($formData)
    {
        if(empty($formData)) {
            return false;
        }

        $record = self::find()->andWhere(['payment_uuid'=>$formData['payment_uuid']])->one();
        if(empty($record) || !$this->updatePreHandler($formData, $record)) {
            return true;
        }
        return $record->update();
    }

    /**
     * 申请验收发票
     * 可以单笔流水验收发票，也可以多笔流水一起验收
     * @param $formData
     * @return bool
     * @throws Exception
     */
    public function applyCheckStamp($formData) {
        if(empty($formData)) {
            return true;
        }

        $uuids = explode(',', trim($formData['uuid'],','));
        // 表示多笔流水一起付款
        if(count($uuids) > 1) {
            $formData['checked_stamp_money'] = Payment::FullPaied;
        }
        $formData['stamp_status'] = PaymentConfig::StampChecking;
        $payment = new Payment();
        $transaction = Yii::$app->db->beginTransaction();

        try {
            foreach ($uuids as $uuid) {
                $formData['uuid'] = $uuid;
                $payment->applyCheckStamp($formData);
            }
        } catch (Exception $e) {
            $transaction->rollBack();
            throw  $e;
            return false;
        }

        $transaction->commit();
        return true;
    }
}