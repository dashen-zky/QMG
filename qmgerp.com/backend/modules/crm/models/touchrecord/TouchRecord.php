<?php

/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2016/7/22 0022
 * Time: 下午 3:42
 */
namespace backend\modules\crm\models\touchrecord;
use backend\models\interfaces\PrimaryTable;
use backend\models\interfaces\RecordOperator;
use backend\models\MyPagination;
use backend\modules\crm\models\customer\record\PrivateCustomer;
use backend\modules\crm\models\customer\record\PublicCustomer;
use backend\modules\crm\models\project\record\Project;
use backend\modules\crm\models\project\record\ProjectTouchRecordMap;
use yii\data\Pagination;
use backend\modules\crm\models\CRMBaseRecord;
use backend\models\UUID;
use backend\modules\crm\models\customer\record\CustomerTouchRecordMap;
use backend\modules\hr\models\EmployeeBasicInformation;
use yii\db\Exception;
use Yii;

class TouchRecord extends CRMBaseRecord implements RecordOperator,PrimaryTable
{
    static public function tableName()
    {
        return self::CRMTouchRecord;
    }

    public function deleteRecordByUuid($uuid)
    {
        // TODO: Implement deleteRecordByUuid() method.
    }

    public function updateRecord($formData)
    {
        // TODO: Implement updateRecord() method.
    }

    public function formDataPreHandler(&$formData, $record)
    {
        if(empty($record)) {
            $formData['uuid'] = UUID::getUUID();
            //跟进人
            $formData['follow_uuid'] = Yii::$app->user->getIdentity()->getId();
            $this->handlerFormDataTime($formData, 'time');
            $this->handlerFormDataTime($formData, 'next_touch_time');
            $this->handlerFormDataTime($formData, 'predict_contract_time');
        }
        parent::formDataPreHandler($formData, $record); // TODO: Change the autogenerated stub
    }

    public function insertRecord($formData)
    {
        if(empty($formData) || !isset($formData['contact_uuid']) || empty($formData['contact_uuid'])) {
            return true;
        }

        if(!$this->updatePreHandler($formData)) {
            return true;
        }
        $transaction = Yii::$app->db->beginTransaction();

        try {
            $this->insert();
            if ($formData['category'] === 'customer') {
                // 添加客户跟进记录
                $customerTouchRecord = new CustomerTouchRecordMap();
                $customerTouchRecord->insertSingleRecord([
                    'customer_uuid'=>$formData['customer_uuid'],
                    'touch_record_uuid'=>$formData['uuid'],
                ]);
                // 将客户最近跟进时间，和下次跟进时间更新
                $privateCustomer = new PrivateCustomer();
                $privateCustomer->updateRecord([
                    'uuid'=>$formData['customer_uuid'],
                    'last_touch_time'=>$formData['time'],
                    'next_touch_time'=>
                        isset($formData['next_touch_time'])?$formData['next_touch_time']:'',
                ]);
            } else if($formData['category'] === 'project') {
                // 项目跟进记录
                $projectTouchRecord = new ProjectTouchRecordMap();
                $projectTouchRecord->insertSingleRecord([
                    'project_uuid'=>$formData['project_uuid'],
                    'touch_record_uuid'=>$formData['uuid'],
                ]);
                // 将项目的最近跟进时间，和下次跟进时间更新一下

                $project = new Project();
                $project->updateRecord([
                    'uuid'=>$formData['project_uuid'],
                    'last_touch_time'=>$formData['time'],
                    'next_touch_time'=>
                        isset($formData['next_touch_time'])?$formData['next_touch_time']:'',
                ]);
            }
        } catch(Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }
        $transaction->commit();
        return true;
    }

    public function getRecordByUuid($uuid)
    {
        // TODO: Implement getRecordByUuid() method.
    }

    public function getRecordFromObjectUuid($uuid,$type) {
        return $this->touchRecordList(
            [
                'touch_record'=>[
                    '*'
                ],
                'follow'=>[
                    'name'
                ],
                'contact'=>[
                    'name'
                ],
                $type => [
                    'name',
                ]
            ],
            [
                $type=>[
                    'uuid="'.$uuid.'"',
                ],
            ],
            $type);
    }

    public function touchRecordList($selects, $conditions = null,$type) {
        $aliasMap = [
            'touch_record'=>'t1',
            'object_map'=>'t2',
            'contact'=>'t3',
            $type=>'t4',
            'follow'=>'t5',
        ];
        $selector = [];

        if (!empty($selects)) {
            foreach($aliasMap as $key=>$alias) {
                if (isset($selects[$key])) {
                    foreach($selects[$key] as $select) {
                        $select = trim($select);
                        if ($key === 'touch_record') {
                            $selector[] = $alias ."." . $select;
                        } else {
                            $selector[] = $alias ."." . $select . " " . $key . "_" .$select;
                        }
                    }
                }
            }
        }

        if($type === 'customer') {
            $map = self::CRMCustomerTouchRecordMap;
            $objectTable = self::CRMCustomerBasic;
        } elseif($type === 'project') {
            $map = self::CRMProjectTouchRecordMap;
            $objectTable = self::CRMProject;
        }

        $query = self::find()
            ->alias('t1')
            ->select($selector)
            ->leftJoin($map . ' t2','t1.uuid=t2.touch_record_uuid')
            ->leftJoin(self::CRMContact . ' t3','t3.uuid = t1.contact_uuid')
            ->leftJoin($objectTable. ' t4','t4.uuid=t2.'.$type.'_uuid')
            ->leftJoin(EmployeeBasicInformation::$tableName.' t5','t5.uuid = t1.follow_uuid');
        //
        if(!empty($conditions)) {
            foreach($aliasMap as $key=>$alias) {
                if (isset($conditions[$key])) {
                    foreach($conditions[$key] as $condition) {
                        $condition = trim($condition);
                        $query->andWhere(
                            $alias . "." . $condition
                        );
                    }
                }
            }
        }

        $pagination = new MyPagination([
            'totalCount'=>$query->count(),
            'pageSize' => self::PageSize,
        ]);
        $publicCustomerList = $query->orderBy('id DESC')->offset($pagination->offset)->limit($pagination->limit)->asArray()->all();
        $data = [
            'pagination' => $pagination,
            'touchRecordList'=> $publicCustomerList,
        ];
        return $data;
    }
}