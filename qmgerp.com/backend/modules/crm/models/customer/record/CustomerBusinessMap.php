<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2016/7/18 0018
 * Time: 下午 4:51
 */

namespace backend\modules\crm\models\customer\record;


use backend\models\interfaces\Map;
use backend\models\interfaces\RecordOperator;
use yii\db\Exception;
use Yii;

class CustomerBusinessMap extends CustomerBaseRecord implements RecordOperator,Map
{
    const requireType = 1;
    const businessType = 2;
    static public function tableName()
    {
        return self::CRMCustomerBusinessMap;
    }

    public function updateRecord($formData)
    {
        if(empty($formData)) {
            return ;
        }

        $this->customer_uuid = $formData['uuid'];
        $records = self::find()->andWhere([
            'customer_uuid'=>$this->customer_uuid,
        ])->asArray()->all();
        $oldRequireIds = $this->getAppointedValue($records,'business_id');
        $requireIds = $formData['business'];
        // 找出修改前后数据差集
        $shouldDeletes = array_diff($oldRequireIds,$requireIds);
        $shouldInserts = array_diff($requireIds,$oldRequireIds);
        $transaction = Yii::$app->db->beginTransaction();
        try{
            //删除在前台页面删除的数据
            foreach($shouldDeletes as $shouldDelete) {
                $this->deleteAll([
                    'customer_uuid'=>$this->customer_uuid,
                    'business_id'=>$shouldDelete,
                ]);
            }
            //插入在前台页面新增的数据
            foreach($shouldInserts as $shouldInsert) {
                $data = [
                    'customer_uuid'=>$this->customer_uuid,
                    'business_id'=>$shouldInsert,
                ];
                $this->insertSingleRecord($data);
            }
        }catch (Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }
        $transaction->commit();
        return true;
    }

    public function formDataPreHandler(&$formData, $record)
    {
        parent::formDataPreHandler($formData, $record); // TODO: Change the autogenerated stub
    }

    public function insertRecord($formData)
    {
        if(empty($formData)) {
            return ;
        }

        $ids = $formData['business'];
        $transaction = Yii::$app->db->beginTransaction();
        try {
            foreach ($ids as $id) {
                $data = [
                    'customer_uuid'=>$formData['uuid'],
                    'business_id'=>$id,
                ];
                $this->insertSingleRecord($data);
            }
        } catch (Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }

        $transaction->commit();
        return true;
    }

    public function getRecordListByCustomerUuid($uuid) {
        return self::find()->andWhere([
            'customer_uuid'=>$uuid,
        ])->asArray()->all();
    }

    public function recordPreHandler(&$formData, $record = null)
    {
        if(empty($record)) {
            $this->setOldAttribute('customer_uuid',null);
            $this->setOldAttribute('business_id',null);
            $this->setOldAttribute('created_uuid',null);
        }
    }

    public function insertSingleRecord($formData)
    {
        if(empty($formData)) {
            return false;
        }

        if(!$this->updatePreHandler($formData)) {
            return false;
        }

        return $this->insert();
    }
    public function updateSingleRecord($formData)
    {
        // TODO: Implement updateSingleRecord() method.
    }
}