<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2016/7/20 0020
 * Time: 下午 4:32
 */

namespace backend\modules\crm\models\customer\record;
use backend\models\interfaces\PrimaryTable;
use backend\models\interfaces\RecordOperator;
use backend\modules\crm\models\customer\model\ContactForm;
use backend\modules\crm\models\customer\model\PrivateCustomerForm;
use backend\modules\hr\models\EmployeeBasicInformation;
use backend\modules\rbac\model\RBACManager;
use Yii;
use yii\db\Exception;
use backend\models\MyPagination;
use backend\models\UUID;

class PrivateCustomer extends Customer implements PrimaryTable,RecordOperator
{
    public static $aliasMap = [
        'customer'=>'t1',
        'customer_advance'=>'t2',
        'customer_business_map'=>'t3',
        'customer_duty_map'=>'t4',
        'duty'=>'t5',
        'sales'=>'t6',
    ];
    static public function tableName()
    {
        return self::CRMCustomerAdvance;
    }

    public function updateRecord($formData)
    {
        if (empty($formData)) {
            return true;
        }
        $transaction = Yii::$app->db->beginTransaction();
        try{
            if((new PublicCustomer())->updateRecord($formData)) {
                $record = self::find()->andWhere(['customer_uuid'=>$formData['uuid']])->one();
                if ($this->updatePreHandler($formData, $record)) {
                    $record->update();
                }
            }
        }catch(Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }
        $transaction->commit();
        return true;
    }

    public function formDataPreHandler(&$formData, $record)
    {
        if(empty($record)) {
            $formData['public_tag'] = self::privateTag;
            if(!isset($formData['uuid']) || empty($formData['uuid'])) {
                $formData['uuid'] = UUID::getUUID();
            }
            if(!isset($formData['customer_uuid']) || empty($formData['customer_uuid'])) {
                $formData['customer_uuid'] = $formData['uuid'];
            }
        }
        parent::formDataPreHandler($formData, $record); // TODO: Change the autogenerated stub
    }

    public function recordPreHandler(&$formData, $record = null)
    {
        if(empty($record)) {
            $this->sales_uuid = Yii::$app->user->getIdentity()->getId();
            $this->obtain_time = time();
            $this->setOldAttribute('sales_uuid',null);
            $this->setOldAttribute('customer_uuid',null);
            $this->setOldAttribute('obtain_time',null);
            $this->setOldAttribute('created_uuid',null);
        }
        parent::recordPreHandler($formData, $record); // TODO: Change the autogenerated stub
    }

    public function insertRecord($formData)
    {
        if (empty($formData) || empty($formData['full_name'])) {
            return true;
        }

        if (!$this->updatePreHandler($formData)) {
            return false;
        }
        $transaction = Yii::$app->db->beginTransaction();
        try{

            (new PublicCustomer())->insertRecord($formData);
            $this->insert();
        } catch(Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }
        $transaction->commit();
        return true;
    }

    // 逻辑删除
    public function deleteRecordByUuid($uuid)
    {
        if(empty($uuid)) {
            return false;
        }
        // 逻辑删除
        $publicCustomer = new PublicCustomer();
        return $publicCustomer->deleteRecordByUuid($uuid);
    }

    public function getRecordByUuid($uuid)
    {
        $privateCustomer = $this->privateCustomerList([
            'customer_advance'=>[
                "*"
            ],
            'sales'=>[
                'name',
            ],
        ],[
            '=',
            self::$aliasMap['customer'] . '.uuid',
            $uuid
        ],true);
        $customer = (new PublicCustomer())->getRecordByUuid($uuid);
        $privateCustomer = array_merge($privateCustomer, $customer['publicCustomer']);
        $customer['privateCustomer'] = $privateCustomer;
        unset($customer['publicCustomer']);
        return $customer;
    }

    // 放弃客户
    public function drop($formData) {
        if (empty($formData)) {
            return true;
        }

        $record = self::find()->andWhere(['customer_uuid'=>$formData['uuid']])->one();
        if(empty($record)) {
            return true;
        }

        $transaction = Yii::$app->db->beginTransaction();
        try{
            $record->delete();
            $customer = PublicCustomer::find()->andWhere(['uuid'=>$formData['uuid']])->one();
            if(empty($customer)) {
                return false;
            }
            $customer->public_tag = PublicCustomer::publicTag;
            $customer->drop_reason = trim($formData['drop_reason']);
            $customer->update();
        } catch(Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }

        $transaction->commit();
        return true;
    }
    // 获取客户
    public function obtain($uuid) {
        if (!$uuid || empty($uuid)) {
            return true;
        }

        $transaction = Yii::$app->db->beginTransaction();
        try{
            $flag = (new PublicCustomer())->obtain($uuid);
            if($flag) {
                $data = [
                    'sales_uuid' => Yii::$app->user->getIdentity()->getId(),
                    'customer_uuid' => $uuid,
                    'obtain_time' => time(),
                ];
                if ($this->updatePreHandler($data)) {
                    $this->insert();
                }
            }
        }catch (Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }
        $transaction->commit();
        return true;
    }

    public function allList()
    {
        $userName = Yii::$app->user->getIdentity()->getUserName();
        if($userName === 'admin') {
            $condition = [
                '=',
                self::$aliasMap['customer'] . '.public_tag',
                self::privateTag
            ];
        } else {
            $uuids = $this->getOrdinateUuids(RBACManager::CustomerModule);
            $condition = [
                'and',
                [
                    '=',
                    self::$aliasMap['customer'] . '.public_tag',
                    self::privateTag
                ],
                [
                    '=',
                    self::$aliasMap['customer'] . '.enable',
                    self::Enable
                ],
                [
                    'in',
                    self::$aliasMap['customer_advance'] . '.sales_uuid',
                    $uuids
                ],
            ];
        }
        $list = $this->privateCustomerList(
            [
                'customer' => [
                    "*"
                ],
                'customer_advance' => [
                    'level',
                    'next_touch_time',
                    'obtain_time',
                ],
                'customer_business_map'=>[
                    'business_id',
                ],
                'duty'=>[
                    'name',
                ],
                'customer_duty_map'=>[
                    'type',
                ],
                'sales'=>[
                    'name',
                ],
            ],
            $condition
        );
        $privateCustomerList = &$list['privateCustomerList'];
        if (empty($privateCustomerList)) {
            return $list;
        }
        $privateCustomerList = $this->handlerListFieldToShow($privateCustomerList);
        return $list;
    }

    public function handlerListFieldToShow(&$privateCustomerList) {
        for($i = 0; $i < count($privateCustomerList); $i++) {
            // 处理重复的字段
            if (isset($privateCustomerList[$i]['customer_business_map_business_id'])
                && !empty($privateCustomerList[$i]['customer_business_map_business_id'])) {
                $privateCustomerList[$i]['customer_business_map_business_id'] =
                    $this->getDistinctValueAsArray(
                        explode(",",$privateCustomerList[$i]['customer_business_map_business_id'])
                    );
            }
            if (isset($privateCustomerList[$i]['duty_name'])
                && !empty($privateCustomerList[$i]['duty_name'])) {
                $privateCustomerList[$i]['duty_name'] =
                    $this->filterRepeatField(
                        $privateCustomerList[$i]['customer_duty_map_type'],
                        $privateCustomerList[$i]['duty_name'],
                        ContactForm::CustomerDuty
                    );
            }
        }
        return $privateCustomerList;
    }

    public function privateCustomerList($selects, $conditions = null,$fetchOne = false) {

        $selector = [];

        if (!empty($selects)) {
            foreach(self::$aliasMap as $key=>$alias) {
                if (isset($selects[$key])) {
                    foreach($selects[$key] as $select) {
                        $select = trim($select);
                        if ($key === 'customer' || $key === 'customer_advance') {
                            $selector[] = $alias ."." . $select;
                        } elseif($key === 'contact' || $key === 'customer_business_map' || $key === 'customer_contact_map') {
                            $select = trim($select);
                            $selector[] = "group_concat(".$alias ."." . $select .") " . $key . "_" .$select;
                        }else {
                            $selector[] = $alias ."." . $select . " " . $key . "_" .$select;
                        }
                    }
                }
            }
        }


        $query = self::find()
            ->alias('t2')
            ->select($selector)
            ->leftJoin(self::CRMCustomerBasic . ' t1','t1.uuid=t2.customer_uuid')
            ->leftJoin(self::CRMCustomerBusinessMap . ' t3','t3.customer_uuid = t1.uuid')
            ->leftJoin(self::CRMCustomerContactMap . " t4",'t4.customer_uuid=t1.uuid')
            ->leftJoin(self::CRMContact . ' t5','t5.uuid = t4.contact_uuid')
            ->leftJoin(EmployeeBasicInformation::$tableName . " t6",'t6.uuid=t2.sales_uuid')
            ->groupBy('t1.uuid');
        //
        if(!empty($conditions)) {
            $query->andWhere($conditions);
        }
        if ($fetchOne) {
            return $query->asArray()->one();
        }
        $pagination = new MyPagination([
            'totalCount'=>$query->count(),
            'pageSize' => self::PageSize,
        ]);
        $publicCustomerList = $query->orderBy('t1.last_touch_time desc')->offset($pagination->offset)->limit($pagination->limit)->asArray()->all();
        $data = [
            'pagination' => $pagination,
            'privateCustomerList'=> $publicCustomerList,
        ];
        return $data;
    }

    public function listFilter($filter) {
        if(empty($filter)) {
            return $this->allList();
        }
        if(isset($filter['code']) && !empty($filter['code'])) {
            preg_match('/([a-zA-Z]*)(\d+)/',$filter['code'],$match);
            if(empty($match)) {
                return null;
            }
            if($match[1] === PrivateCustomerForm::codePrefix) {
                $filter['code'] = $match[2];
            }
        }
        $this->handlerFormDataTime($filter,'min_time');
        $this->handlerFormDataTime($filter,'max_time');

        $map = [
            'code'=>[
                'like',
                'customer',
                'code',
            ],
            'name'=>[
                'like',
                'customer',
                'name',
            ],
            'level'=>[
                '=',
                'customer_advance',
                'level',
            ],
            'require'=>[
                '=',
                'customer_business_map',
                'business_id',
            ],
            'status'=>[
                '=',
                'customer',
                'status',
            ],
            'sales_name'=>[
                'like',
                'sales',
                'name',
            ],
            'type'=>[
                '=',
                'customer',
                'type',
            ],
            'min_time'=>[
                '>=',
                'customer',
                'last_touch_time',
            ],
            'max_time'=>[
                '<=',
                'customer',
                'last_touch_time',
            ],
            'intent_level'=>[
                '=',
                'customer',
                'intent_level',
            ],
            'industry'=>[
                '=',
                'customer',
                'industry'
            ]
        ];

        $condition = [
            'and',
        ];
        $userName = Yii::$app->user->getIdentity()->getUserName();
        if($userName === 'admin') {
            $condition[] = [
                '=',
                self::$aliasMap['customer'] . '.public_tag',
                self::privateTag
            ];
        } else {
            $uuids = $this->getOrdinateUuids(RBACManager::CustomerModule);
            $condition = [
                'and',
                [
                    '=',
                    self::$aliasMap['customer'] . '.public_tag',
                    self::privateTag
                ],
                [
                    '=',
                    self::$aliasMap['customer'] . '.enable',
                    self::Enable
                ],
                [
                    'in',
                    self::$aliasMap['customer_advance'] . '.sales_uuid',
                    $uuids
                ],
            ];
        }

        foreach($filter as $key=>$value) {
            $condition[] = [
                $map[$key][0],
                self::$aliasMap[$map[$key][1]] . '.' . $map[$key][2],
                $value
            ];
        }

        $list = $this->privateCustomerList(
            [
                'customer' => [
                    "*"
                ],
                'customer_advance' => [
                    'level',
                    'next_touch_time',
                    'obtain_time',
                ],
                'customer_business_map'=>[
                    'business_id',
                ],
                'duty'=>[
                    'name',
                ],
                'customer_duty_map'=>[
                    'type',
                ],
                'sales'=>[
                    'name',
                ],
            ],
            $condition
        );
        $privateCustomerList = &$list['privateCustomerList'];
        if (empty($privateCustomerList)) {
            return $list;
        }
        $privateCustomerList = $this->handlerListFieldToShow($privateCustomerList);
        return $list;
    }
}