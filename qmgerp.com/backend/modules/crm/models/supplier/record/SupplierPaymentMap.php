<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2016/9/29 0029
 * Time: 上午 10:20
 */

namespace backend\modules\crm\models\supplier\record;


use backend\models\interfaces\DeleteMapRecord;
use backend\models\interfaces\RecordOperator;
use backend\modules\crm\models\project\record\ProjectPaymentMap;
use backend\modules\rbac\model\RBACManager;
use Yii;
use yii\db\Exception;
use backend\models\UUID;
use backend\modules\fin\payment\models\PaymentConfig;
use backend\modules\fin\payment\models\Payment;
use backend\modules\crm\models\project\model\ProjectForm;
use backend\modules\crm\models\supplier\model\SupplierForm;
use backend\modules\crm\models\part_time\model\PartTimeForm;

class SupplierPaymentMap extends SupplierBaseRecord implements DeleteMapRecord,RecordOperator
{
    const Supplier = 1;
    const PartTime = 2;
    public static function tableName()
    {
        return self::CRMSupplierPaymentMap;
    }

    public function assess($formData) {
        if(empty($formData)) {
            return true;
        }

        $payment = new Payment();
        return $payment->assess($formData);
    }

    public function formDataPreHandler(&$formData, $record)
    {
        if(!isset($formData['uuid']) || empty($formData['uuid'])) {
            $formData['uuid'] = UUID::getUUID();
        }

        if(!isset($formData['type']) || empty($formData['type'])) {
            $formData['type'] = PaymentConfig::PaymentForProjectMedia;
        }

        if(!isset($formData['payment_uuid']) || empty($formData['payment_uuid'])) {
            $formData['payment_uuid'] = $formData['uuid'];
        }
        parent::formDataPreHandler($formData, $record); // TODO: Change the autogenerated stub
    }

    public function insertSingleRecord($formData)
    {
        if(empty($formData)) {
            return true;
        }
        if(!$this->updatePreHandler($formData)) {
            return false;
        }

        $transaction = Yii::$app->db->beginTransaction();
        try{
            $payment = new Payment();
            if(!$payment->insertRecord($formData)) {
                $transaction->rollBack();
                return false;
            }
            if(isset($formData['project_uuid']) && !empty($formData['project_uuid'])) {
                $projectPaymentMap = new ProjectPaymentMap();
                if(!$projectPaymentMap->insertSingleRecord([
                    'payment_uuid'=>$formData['payment_uuid'],
                    'project_uuid'=>$formData['project_uuid'],
                ])) {
                    $transaction->rollBack();
                    return false;
                }
            }
            $this->insert();
        } catch(Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }

        $transaction->commit();
        return true;
    }

    public function updateRecord($formData)
    {
        if(empty($formData)) {
            return true;
        }

        $transaction = Yii::$app->db->beginTransaction();
        try{
            if(isset($formData['project_uuid'])) {
                $projectPaymentMap = new ProjectPaymentMap();
                $projectPaymentMap->updateRecord([
                    'payment_uuid'=>$formData['uuid'],
                    'project_uuid'=>$formData['project_uuid']
                ]);
            }

            if(isset($formData['supplier_uuid'])) {
                $this->updateSingleRecord([
                    'payment_uuid'=>$formData['uuid'],
                    'supplier_uuid'=>$formData['supplier_uuid'],
                    'supplier_type'=>$formData['supplier_type'],
                    'receiver_contact_uuid'=>isset($formData['receiver_contact_uuid'])?$formData['receiver_contact_uuid']:null,
                    'receiver_account_uuid'=>$formData['receiver_account_uuid'],
                ]);
            }

            $payment = new Payment();
            $payment->updateRecord($formData);
        } catch(Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }

        $transaction->commit();
        return true;
    }

    public function insertRecord($formData)
    {
        // TODO: Implement insertRecord() method.
    }

    public function updateSingleRecord($formData)
    {
        if(empty($formData)) {
            return false;
        }

        $record = self::find()->andWhere(['payment_uuid'=>$formData['payment_uuid']])->one();
        if(empty($record) || !$this->updatePreHandler($formData, $record)) {
            return false;
        }
        return $record->update();
    }

    public function deleteSingleRecord($uuid1, $uuid2)
    {
        // TODO: Implement deleteSingleRecord() method.
    }

    public function getPaymentListByPartTimeUuid($uuid) {
        $payment = new Payment();
        return $payment->paymentList(
            [
                'payment'=>[
                    '*'
                ],
                'project'=>[
                    'name',
                    'code',
                ],
                'created'=>[
                    'name',
                ]
            ],
            [
                [
                    '=',
                    $payment->aliasMap['part_time'] . '.uuid',
                    $uuid
                ]
            ]
        );
    }

    public function getPaymentListBySupplierUuid($uuid) {
        $payment = new Payment();
        return $payment->paymentList(
            [
                'payment'=>[
                    '*'
                ],
                'project'=>[
                    'name',
                    'code',
                ],
                'created'=>[
                    'name',
                ]
            ],
            [
                [
                    '=',
                    $payment->aliasMap['supplier'] . '.uuid',
                    $uuid
                ]
            ]
        );
    }
    
    public function myPaymentList($condition = null) {
        $payment = new Payment();
        $uuids = $this->getOrdinateUuids(RBACManager::Media);
        $condition = [
            $condition,
            [
                'in',
                't1.created_uuid',
                $uuids,
            ],
            [
                '=',
                $payment->aliasMap['payment'] . '.type',
                PaymentConfig::PaymentForProjectMedia,
            ]
        ];
        return $payment->paymentList(
            [
                'payment'=>[
                    '*'
                ],
                'project'=>[
                    'name',
                    'code',
                ],
                'supplier'=>[
                    'name',
                    'code',
                ],
                'part_time'=>[
                    'name',
                    'code',
                ]
            ],
            $condition
        );
    }

    // 这个uuid是payment_uuid
    public function getRecordByUuid($uuid) {
        if(empty($uuid)) {
            return false;
        }

        $payment = new Payment();
        return $payment->paymentList(
            [
                'payment'=>[
                    '*'
                ],
                'paied'=>[
                    'name',
                ],
                'created'=>[
                    'name',
                ],
                'project'=>[
                    'name',
                    'code',
                    'uuid',
                ],
                'supplier'=>[
                    'name',
                    'code',
                    'uuid',
                ],
                'part_time'=>[
                    'name',
                    'code',
                    'uuid',
                ],
                'supplier_payment_map'=>[
                    'supplier_type',
                    'receiver_account_uuid',
                    'receiver_contact_uuid',
                ],
                'first_assess'=>[
                    'name',
                ],
                'second_assess'=>[
                    'name'
                ],
                'third_assess'=>[
                    'name'
                ],
                'fourth_assess'=>[
                    'name'
                ],
                'stamp'=>[
                    'series_number',
                ],
                'checked_stamp'=>[
                    'name'
                ],
            ],
            [
                [
                    '=',
                    $payment->aliasMap['payment'] . '.uuid',
                    $uuid
                ],
            ],
            true
        );
    }

    /**
     * 申请验收发票
     * 可以单笔流水验收发票，也可以多笔流水一起验收
     * @param $formData
     * @return bool
     * @throws Exception
     */
    public function applyCheckStamp($formData) {
        if(empty($formData)) {
            return true;
        }

        $uuids = explode(',', trim($formData['uuid'],','));
        // 表示多笔流水一起付款
        if(count($uuids) > 1) {
            $formData['checked_stamp_money'] = Payment::FullPaied;
        }
        $formData['stamp_status'] = PaymentConfig::StampChecking;
        $payment = new Payment();
        $transaction = Yii::$app->db->beginTransaction();

        try {
            foreach ($uuids as $uuid) {
                $formData['uuid'] = $uuid;
                $payment->applyCheckStamp($formData);
            }
        } catch (Exception $e) {
            $transaction->rollBack();
            throw  $e;
            return false;
        }

        $transaction->commit();
        return true;
    }

    public function listFilter($filter) {
        $is_apply_check_stamp = isset($filter['is_apply_check_stamp'])?$filter['is_apply_check_stamp']:false;
        unset($filter['is_apply_check_stamp']);
        if(empty($filter)) {
            return $this->myPaymentList();
        }

        if(isset($filter['project_code']) && !empty($filter['project_code'])) {
            preg_match('/([a-zA-Z]*)(\d+)/',$filter['project_code'],$match);
            if($match[1] === ProjectForm::codePrefix) {
                $filter['project_code'] = $match[2];
            }
        }

        if(isset($filter['code']) && !empty($filter['code'])) {
            preg_match('/([a-zA-Z]*)(\d+)/',$filter['code'],$match);
            if($match[1] === PaymentConfig::CodePrefix) {
                $filter['code'] = $match[2];
            }
        }

        if(isset($filter['supplier_code']) && !empty($filter['supplier_code'])) {
            preg_match('/([a-zA-Z]*)(\d+)/',$filter['supplier_code'],$match);
            if(in_array($match[1],[
                SupplierForm::codePrefix,
                PartTimeForm::codePrefix
            ])) {
                $filter['supplier_code'] = $match[2];
            }
        }

        $this->handlerFormDataTime($filter, 'min_expect_time');
        $this->handlerFormDataTime($filter, 'max_expect_time');
        $this->handlerFormDataTime($filter, 'max_created_time');
        $this->handlerFormDataTime($filter, 'min_created_time');

        $payment = new Payment();

        $map = [
            'code'=>[
                'like',
                'payment',
                'code'
            ],
            'project_name'=>[
                'like',
                'project',
                'name',
            ],
            'project_code'=>[
                'like',
                'project',
                'code',
            ],
            'supplier_name'=>[
                'like',
                [
                    'supplier',
                    'part_time'
                ],
                'name',
            ],
            'supplier_code'=>[
                'like',
                [
                    'supplier',
                    'part_time'
                ],
                'code',
            ],
            'stamp_status'=>[
                '=',
                'payment',
                'stamp_status',
            ],
            'min_checked_stamp_money'=>[
                '>=',
                'payment',
                'checked_stamp_money',
            ],
            'max_checked_stamp_money'=>[
                '<=',
                'payment',
                'checked_stamp_money',
            ],
            'purpose'=>[
                '=',
                'payment',
                'purpose',
            ],
            'with_stamp'=>[
                '=',
                'payment',
                'with_stamp',
            ],
            'status'=>[
                '=',
                'payment',
                'status',
            ],
            'receiver_account_type'=>[
                '=',
                'payment',
                'receiver_account_type',
            ],
            'max_created_time'=>[
                '<=',
                'payment',
                'created_time',
            ],
            'min_created_time'=>[
                '>=',
                'payment',
                'created_time',
            ],
            'max_expect_time'=>[
                '<=',
                'payment',
                'expect_time',
            ],
            'min_expect_time'=>[
                '>=',
                'payment',
                'expect_time',
            ],
            'min_money'=>[
                '>=',
                'payment',
                'actual_money',
            ],
            'max_money'=>[
                '<=',
                'payment',
                'actual_money',
            ],
        ];
        $uuids = $this->getOrdinateUuids(RBACManager::Media);
        $condition = [
            [
                'in',
                $payment->aliasMap['payment'] . '.created_uuid',
                $uuids,
            ],
            [
                '=',
                $payment->aliasMap['payment'] . '.type',
                PaymentConfig::PaymentForProjectMedia,
            ]
        ];

        if($is_apply_check_stamp) {
            $condition[] = [
                'and',
                [
                    '=',
                    $payment->aliasMap['payment'] . '.with_stamp',
                    PaymentConfig::WithStamp,
                ],
                [
                    'in',
                    $payment->aliasMap['payment'] . '.status',
                    [
                        PaymentConfig::StatusWithoutPaied,
                        PaymentConfig::StatusPartPaied,
                        PaymentConfig::StatusSuccess,
                    ],
                ]
            ];
        }

        foreach($filter as $key=>$value) {
            if(!is_array($map[$key][1])) {
                $condition[] = [
                    $map[$key][0],
                    $payment->aliasMap[$map[$key][1]] . '.' . $map[$key][2],
                    trim($value, ' ')
                ];
                continue;
            }

            $tempCondition = [
                'or',
            ];
            foreach ($map[$key][1] as $item) {
                $tempCondition[] = [
                    $map[$key][0],
                    $payment->aliasMap[$item] . '.' . $map[$key][2],
                    trim($value, ' ')
                ];
            }
            $condition[] = $tempCondition;
        }

        return $payment->paymentList(
            [
                'payment'=>[
                    '*'
                ],
                'project'=>[
                    'name',
                    'code',
                ],
                'supplier'=>[
                    'name',
                    'code',
                ],
                'part_time'=>[
                    'name',
                    'code',
                ]
            ],
            $condition
        );
    }
}