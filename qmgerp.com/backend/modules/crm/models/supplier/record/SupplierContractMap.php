<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2016/8/9 0009
 * Time: 下午 9:23
 */

namespace backend\modules\crm\models\supplier\record;

use backend\models\MyPagination;
use backend\modules\crm\models\supplier\model\SupplierConfig;
use backend\modules\fin\models\contract\ContractBaseRecord;
use backend\modules\hr\models\EmployeeBasicInformation;
use yii;
use backend\models\interfaces\Map;
use backend\models\interfaces\RecordOperator;
use backend\modules\fin\models\contract\ContractTemplateRecord;
use backend\models\UUID;
use yii\db\Exception;
use backend\modules\fin\models\FINBaseRecord;
use yii\data\Pagination;
use yii\helpers\Json;

class SupplierContractMap extends SupplierBaseRecord implements RecordOperator,Map
{
    public static function tableName()
    {
        return self::CRMSupplierContractMap;
    }

    public function updateRecord($formData)
    {
        // TODO: Implement updateRecord() method.
    }

    public function updateSingleRecord($formData)
    {
        if(empty($formData)) {
            return true;
        }

        $record = self::find()->andWhere([
            'contract_uuid'=>$formData['uuid'],
            'supplier_uuid'=>$formData['supplier_uuid'],
        ])->one();
        if(!parent::updatePreHandler($formData,$record)) {
            return true;
        }
        $transaction = Yii::$app->db->beginTransaction();
        try{
            $contract = new ContractBaseRecord();
            $contract->updateRecord($formData);
            $record->update();
        } catch(Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }
        $transaction->commit();
        return true;
    }

    public function insertRecord($formData)
    {

    }

    public function formDataPreHandler(&$formData, $record)
    {
        if (!isset($formData['uuid']) || empty($formData['uuid'])) {
            $formData['uuid'] = UUID::getUUID();
        }
        $formData['contract_uuid'] = $formData['uuid'];
        $formData['path_dir'] = "/upload/contract/supplier/".$formData['uuid'];
        if(empty($record)) {
            parent::clearEmptyField($formData);
        }
        parent::formDataPreHandler($formData, $record);
    }

    public function recordPreHandler(&$formData, $record = null)
    {
        parent::recordPreHandler($formData, $record); // TODO: Change the autogenerated stub
    }

    public function insertSingleRecord($formData)
    {
        if(empty($formData)) {
            return true;
        }

        if(!$this->updatePreHandler($formData)) {
            return true;
        }

        $transaction = Yii::$app->db->beginTransaction();
        try{
            $contract = new ContractBaseRecord();
            if($contract->insertRecord($formData)) {
                $this->insert();
            }
        } catch(Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }
        $transaction->commit();
        return true;
    }

    // 合同模板列表
    public function templateList() {
        $templateList = (new ContractTemplateRecord())->contractTemplateList();
        $templateList = $templateList['list'];
        $list = parent::dropDownListDataBuilder($templateList, 'uuid', 'name');
        $list[0] = '无';
        return $list;
    }

    public function getContractListBySupplierUud($uuid) {
        if(empty($uuid)) {
            return null;
        }
        $list = $this->contractList(
            [
                'contract'=>[
                    '*'
                ],
                'duty'=>[
                    'uuid',
                    'name',
                ],
                'supplier'=>[
                    'name'
                ]
            ],
            [
                'supplier'=>[
                    'uuid="' . $uuid . '"',
                ]
            ]
        );
        return $list;
    }

    public function contractList($selects, $conditions = null, $enablePage = true) {
        $aliasMap = [
            'supplier_contract_map'=>'t1',
            'contract'=>'t2',
            'supplier'=>'t3',
            'duty'=>'t4',
        ];
        $selector = [];

        if (!empty($selects)) {
            foreach($aliasMap as $key=>$alias) {
                if (isset($selects[$key])) {
                    foreach($selects[$key] as $select) {
                        $select = trim($select);
                        if ($key === 'project_contract_map' || $key === 'contract') {
                            $selector[] = $alias ."." . $select;
                        } else {
                            $selector[] = $alias ."." . $select . " " . $key . "_" .$select;
                        }
                    }
                }
            }
        }

        $query = self::find()
            ->alias('t1')
            ->select($selector)
            ->leftJoin(FINBaseRecord::FinContract . " t2", 't2.uuid = t1.contract_uuid')
            ->leftJoin(self::CRMSupplier . " t3", 't3.uuid = t1.supplier_uuid')
           ->leftJoin(EmployeeBasicInformation::$tableName . ' t4', 't2.duty_uuid = t4.uuid');
        //
        if(!empty($conditions)) {
            foreach($aliasMap as $key=>$alias) {
                if (isset($conditions[$key])) {
                    foreach($conditions[$key] as $condition) {
                        $condition = trim($condition);
                        $query->andWhere(
                            $alias . "." . $condition
                        );
                    }
                }
            }
        }

        if(!$enablePage) {
            return $query->asArray()->one();
        }

        $pagination = new MyPagination([
            'totalCount'=>$query->count(),
            'pageSize' => self::PageSize,
        ]);
        $list = $query->orderBy('id DESC')->offset($pagination->offset)->limit($pagination->limit)->asArray()->all();
        $data = [
            'pagination' => $pagination,
            'list'=> $list,
        ];
        return $data;
    }

    public function getRecordByUuid($uuid) {
        $record = $this->contractList(
            [
                'supplier'=>[
                    'name',
                    'uuid',
                ],
                'contract'=>[
                    '*'
                ],
                'duty'=>[
                    'name',
                ]
            ],
            [
                'contract'=>[
                    'uuid="'.$uuid.'"',
                ]
            ],
            false
        );
        return $record;
    }

    public function deleteSingleRecord($uuid1, $uuid2)
    {
        if(empty($uuid2) || empty($uuid1)) {
            return false;
        }

        $record = self::find()->andWhere(['supplier_uuid'=>$uuid2, 'contract_uuid'=>$uuid1])->one();
        if(empty($record)) {
            return false;
        }

        $transaction = Yii::$app->db->beginTransaction();
        try{
            $record->delete();
            $contract = new ContractBaseRecord();
            $contract->deleteRecordByUuid($uuid1);
        } catch(Exception $e) {
            $transaction->rollBack();
            throw $e;
            return false;
        }

        $transaction->commit();
        return true;
    }
}